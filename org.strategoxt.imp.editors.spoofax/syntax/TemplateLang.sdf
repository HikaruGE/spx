module TemplateLang
imports
  SPXCommon

exports
  context-free syntax
    %% tweaks for content completion
    CONTENTCOMPLETE -> TemplateProduction {recover, cons("WATER")}
    CONTENTCOMPLETE -> PlaceholderOption  {recover, cons("WATER")}
    CONTENTCOMPLETE -> PlaceholderOptions {recover, cons("WATER")}

  context-free syntax
    %% options section
    "template" "options" TemplateOption* -> Section {cons("TemplateOptions")}

    "newlines" ":" NewlineOptionValue -> TemplateOption {cons("Newlines")}

    "none"     -> NewlineOptionValue {cons("None")}
    "leading"  -> NewlineOptionValue {cons("Leading")}
    "trailing" -> NewlineOptionValue {cons("Trailing")}

    "keyword" "-/-" Lookaheads[[SDF]] -> TemplateOption {cons("KeywordFollowRestriction")}

  context-free syntax
    %% references to productions using sort.cons notation in priority specification
    SortCons                                   -> Group[[SDF]]  {cons("simple-ref-group")}
    "{" SortCons+ "}"                          -> Group[[SDF]]  {cons("prods-ref-group")}
    "{" Associativity[[SDF]] ":" SortCons+ "}" -> Group[[SDF]]  {cons("assoc-ref-group")}

  context-free syntax
    %% "grammars"
    "templates" TemplateProduction* -> Section {cons("TemplateSection")}

    %% template productions
    ID "=" Symbols[[SDF]] Attributes[[SDF]] -> Production[[SDF]] {cons("SdfProduction")}
    ID "=" Template Attributes[[SDF]] -> TemplateProduction {cons("TemplateProduction")}

    %% template productions `sort.cons = ...'
    SortCons "=" Symbols[[SDF]] Attributes[[SDF]] -> Production[[SDF]] {cons("SdfProductionWithCons")}
    SortCons "=" Template Attributes[[SDF]] -> TemplateProduction {cons("TemplateProductionWithCons")}

    ID "." ID -> SortCons {cons("SortCons")}

    %% placeholders
    PlaceholderPrefix1 PlaceholderSort PlaceholderSuffix PlaceholderOptions ">" -> TemplatePart1 {cons("Placeholder")}
    PlaceholderPrefix2 PlaceholderSort PlaceholderSuffix PlaceholderOptions "]" -> TemplatePart2 {cons("Placeholder")}

    "<" -> PlaceholderPrefix1 {cons("None")}
    "[" -> PlaceholderPrefix2 {cons("None")}

    %% constructor identical to SDF sort to simplify some transformations
    ID -> PlaceholderSort {cons("sort")}

        -> PlaceholderSuffix {cons("None")}
    "*" -> PlaceholderSuffix {cons("Star")}
    "+" -> PlaceholderSuffix {cons("Plus")}
    "?" -> PlaceholderSuffix {cons("Option")}

                                 -> PlaceholderOptions {cons("NoOptions")}
    ";" {PlaceholderOption ","}+ -> PlaceholderOptions {cons("Options")}

    "wrap"                 -> PlaceholderOption {cons("Wrap")}
    "anchor"               -> PlaceholderOption {cons("Anchor")}
    "separator" "=" STRING -> PlaceholderOption {cons("Separator")}

  syntax
    %% placeholders (layout between "<", the text and ":" should be captured)
    "<" <PlaceholderText1-LEX> ":" -> <PlaceholderPrefix1-CF> {cons("Text")}
    "[" <PlaceholderText2-LEX> ":" -> <PlaceholderPrefix2-CF> {cons("Text")}

    %% template parts
    "<<" <TemplatePart1-CF>* ">>" -> <Template-CF> {cons("Template")}
    <TemplateString1-LEX> -> <TemplatePart1-CF> {cons("String")}
    <TemplateEscape1-LEX> -> <TemplatePart1-CF> {cons("Escape")}
    <TemplateLayout-LEX>  -> <TemplatePart1-CF> {cons("Layout")}
    <TemplateNewline-LEX> -> <TemplatePart1-CF> {cons("Newline")}

    "[[" <TemplatePart2-CF>* "]]" -> <Template-CF> {cons("Template")}
    <TemplateString2-LEX> -> <TemplatePart2-CF> {cons("String")}
    <TemplateEscape2-LEX> -> <TemplatePart2-CF> {cons("Escape")}
    <TemplateLayout-LEX>  -> <TemplatePart2-CF> {cons("Layout")}
    <TemplateNewline-LEX> -> <TemplatePart2-CF> {cons("Newline")}

    %% special: no placeholders, no newlines
    "\"" <TemplatePartQ-CF>* "\"" -> <Template-CF> {cons("Template")}
    <TemplateStringQ-LEX> -> <TemplatePartQ-CF> {cons("String")}
    <TemplateEscapeQ-LEX> -> <TemplatePartQ-CF> {cons("Escape")}
    <TemplateLayout-LEX>  -> <TemplatePartQ-CF> {cons("Layout")}

  lexical syntax
    ~[\<\>\:]+ -> PlaceholderText1
    ~[\[\]\:]+ -> PlaceholderText2

  lexical restrictions
    PlaceholderText1 -/- ~[\:]
    PlaceholderText2 -/- ~[\:]

  lexical syntax
    [\ \t\r]* [\n] -> TemplateNewline
    [\ \t\r]+      -> TemplateLayout

    (~[\\\<\>\ \t\r\n] | Backslash1)+ -> TemplateString1
    (~[\\\[\]\ \t\r\n] | Backslash2)+ -> TemplateString2
    ~[\\\"\ \t]+                      -> TemplateStringQ

    [\\] -> Backslash1
    [\\] -> Backslash2

  lexical restrictions
    TemplateLayout -/- [\ \t\r\n]

    %% must be followed by:
    TemplateString1 -/- ~[\\\<\>\ \t\r\n]
    TemplateString2 -/- ~[\\\[\]\ \t\r\n]
    TemplateStringQ -/- ~[\\\"\ \t]

    %% if followed by a backslash, then the backslash must be followed by:
    TemplateString1 -/- [\\].~[\<\>\\]
    TemplateString2 -/- [\\].~[\[\]\\]

    Backslash1 -/- [\<\>\\]
    Backslash2 -/- [\[\]\\]

  lexical syntax
    %% this are the escapes which StringTemplate has
    "\\<"  -> TemplateEscape1
    "\\>"  -> TemplateEscape1
    "\\\\" -> TemplateEscape1
    "\\["  -> TemplateEscape2
    "\\]"  -> TemplateEscape2
    "\\\\" -> TemplateEscape2

    "<" EscapedChar* ">"    -> TemplateEscape1
    "<\\\\>" [\ \t\r]* [\n] -> TemplateEscape1
    "[" EscapedChar* "]"    -> TemplateEscape2
    "[\\\\]" [\ \t\r]* [\n] -> TemplateEscape2

    %% double-backslash isn't allowed in <<>> / [[]] templates
    %% (would clash with <\\> / [\\] line continuation construct)
    ("\\\\" | EscapedChar)+ -> TemplateEscapeQ

    %% escapes allowed in a placeholder-like construct
    "\\ "  -> EscapedChar
    "\\\"" -> EscapedChar
    "\\t"  -> EscapedChar
    "\\r"  -> EscapedChar
    "\\n"  -> EscapedChar
    "\\u" [0-9A-Fa-f]+ -> UnicodeEscapedChar
    UnicodeEscapedChar -> EscapedChar

    "\\" ~[] -> EscapedChar {recover, cons("WATER")}
    "<" ~[\>]+ ">" -> TemplateEscape1 {recover, cons("WATER")}
    "[" ~[\]]+ "]" -> TemplateEscape2 {recover, cons("WATER")}

  lexical restrictions
    TemplateEscapeQ    -/- [\\]
    UnicodeEscapedChar -/- [0-9A-Fa-f]
