%% Grammar for the SpoofaxLang language
%% By default, based on an example "entities" syntax
module SpoofaxLang

imports
  SPXCommon
  Concepts
  Naming
  EditorServiceMix[ESV]
  Stratego-AttributesMix[STR] [
    "imports" ImportModName* -> Decl {cons("Imports")}
      => UNDEFINED -> IGNORED
  ]
  SDFMix[SDF] [
    "definition" Definition -> SDF {cons("Definition")}
      => -> IGNORED
    "module" ModuleName list:ImpSection* Sections -> Module {cons("module")}
      => -> IGNORED
    "left":Grammar "right":Grammar -> Grammar {assoc, cons("conc-grammars")}
      => -> IGNORED
    ImpSection -> Grammar {cons("imp-section")}
      => -> IGNORED
  ]

exports

  context-free start-symbols
    Start

  lexical syntax
    {ID "/"}+       -> QID 
    {ID ("/"|".")}+ -> QIDWithDots

  context-free syntax
  
    "module" ModuleName Section* -> Start {cons("Module")}
    
    Grammar[[SDF]] -> Section {cons("SDFSection")}
    Decl[[STR]]    -> Section {cons("STRSection")}
    Section[[ESV]] -> Section {cons("ESVSection")}
    ImportSection  -> Section
    ConceptSection -> Section
    
    ExportsOrHiddens Grammar[[SDF]] -> Section {cons("SDFSectionEH"), non-assoc}    
    "exports"                       -> ExportsOrHiddens {cons("Exports"), deprecated}
    "hiddens"                       -> ExportsOrHiddens {cons("Hiddens"), deprecated}

    
    %% TODO: Support SDF .def "definitions"?
    
    %% TODO: Mark deprecated, ast, and maybe other attrs as keyword using a {prefer, ast} production
  
  context-free syntax %% Imports
    
    %% TODO: SDF: "retains" clause eliminates need for "hiddens" section. except we need something to hide the start symbols
    %% Maybe a "with start symbols" clause, combined with a warning if the syntax has start symbols but the clause is not specified?
    
    "imports" Import*          -> ImportSection {cons("Imports")}
    "unimports" Import*        -> ImportSection {cons("Unimports")}
    
    QID "[" Symbols[[SDF]] "]" -> ModuleName  {cons("ParamName")}
    QID                        -> ModuleName  {cons("Name")}
    
    ModuleName                           -> Import {cons("Import")}
    ModuleName "retain" Renamings[[SDF]] -> Import {cons("ImportRetain")}
    ModuleName          Renamings[[SDF]] -> Import {cons("ImportRename")}
    "package" QIDWithDots                -> Import {cons("PackageImport")}
    "(" Import ")"                       -> Import {bracket, deprecated} %% SDF-style import
    
    "project"           -> Reserved
    "retain"            -> Reserved
    "with"              -> Reserved %% future use?
    "unimports"         -> Reserved
    
    "imports"           -> Reserved
    "overlays"          -> Reserved
    "rules"             -> Reserved
    "signature"         -> Reserved
    "strategies"        -> Reserved
    "attributes"        -> Reserved
    
    "aliases"           -> Reserved
    "lexical"           -> Reserved
    "priorities"        -> Reserved
    "context-free"      -> Reserved
    "definition"        -> Reserved
    "syntax"            -> Reserved
    "variables"         -> Reserved
    "module"            -> Reserved
    "imports"           -> Reserved
    "exports"           -> Reserved
    "hiddens"           -> Reserved
    "left"              -> Reserved
    "right"             -> Reserved
    "assoc"             -> Reserved
    "non-assoc"         -> Reserved
    "bracket"           -> Reserved
    "sorts"             -> Reserved
    "bracket"           -> Reserved
    "sorts"             -> Reserved
    "restrictions"      -> Reserved
    "scopes"            -> Reserved
    
    Reserved            -> ReservedName[[ESV]]
    
    ReservedName[[ESV]] -> ModuleName {reject}
    

  context-free syntax %% simplified constructors, highlight annos
    
    Constructor                 -> Attribute[[SDF]] {prefer, cons("Constructor")}
    "recover"                   -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"recover\"))))")}
    "incremental"               -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"incremental\"))))")}
    "deprecated"                -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"deprecated\"))))")}
    "deprecated" "(" STRING ")" -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"deprecated\"), [fun(quoted(<1>))])))")}
    "cons" "(" Constructor ")"  -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"cons\"), [fun(quoted(<1>))])))")}
    StrCon[[SDF]]               -> Constructor