imports
	test.A::dummy3
	
package test
{
	module example
	{
		exports
		context-free start-symbols
  		Start 
 
		context-free syntax
		  MethodDecl -> Start{cons("Test"), left-assoc}
		 	"public" Type ID Params -> MethodDecl{cons("Method")}
		 	{Param? "," }+ -> Params{cons("Args")}
		 	{Param+*  "," }+ -> Params{cons("Args1")}
		 	Type ID -> Param{cons ("Parameter")}
		 	
		 	 
		 	"public" ID "(" {(Param ID Type) ","}+ ")""{" "}" -> MethodDecl{non-assoc, cons("Method")}
		 	%%{"," {Param ","}+ }+  ID  Param -> MethodDecl{cons("Method")}
		  	%%{"," Param? }+ -> MethodDecl{cons("Method")}
		 	%%Param* -> MethodDecl{cons("Method")}
		 	(ID-prime (Type Param)+ Param)* -> MethodDecl{cons("Method")}
		 	(Param Type)+ -> MethodDecl1{cons("Method1")}
		 	(Param?*)* -> MethodDecl1{cons("Method1")}
		 	
			"int " ID  -> Param {cons ("Parameter")}  
			%%"int " ID|Type|ID-prime  -> Param {cons ("Parameter")} 
			 Type  Type ID  -> ID-prime{cons("ID-Prime1")}
			((Type Param)+ Type*)+ -> MethodDecl1{cons("Method2")} 
			Type+*+ -> MethodDecl1{cons("Method3")}    
			
			
		
			lexical syntax
			[a-zA-B0-9]+ ID -> Type  
			[a-zA-B][a-zA-B0-9]+ -> ID      
			[0-9]+            -> INT            
		     
		rules  
			  test-id1: A ->  ID-Prime1(2, 1,2)
			  test-id2: A ->  Entity(1,2)     
			  test-id3: A ->  Adil(1,2)      
	    		
	}
}
     
	    