package test
	
	module test-main 
		imports entity-lang
		
		context-free start-symbols 
    	Start

  	context-free syntax
	    "module" ID Definition*       -> Start {cons("Module")}
	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
	    ID ":" Type                   -> Property {cons("Property")}
	    ID                            -> Type {cons("Type")}




	     
package entity-lang
	
	module module-main
		imports 
			libstratego-lib
		
		context-free start-symbols 
    	Start
 
  	context-free syntax
	    "module" ID Definition*       -> Start {cons("Module")}
	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
	    ID ":" Type                   -> Property {cons("Property")}
	    ID                            -> Type {cons("Type")}

		rules
  	 generate-aterm:
    	(selected, position, ast, path, project-path) -> path

		language General properties
    	name          : entity-lang
  		id            : entity-lang
  		extends       : Root
                  
  		description   : "Spoofax/IMP-generated editor for the TestSpoofax language"
  		url           : http://strategoxt.org
                  
  		extensions    : tent
  		start symbols : Start
  		
  	language Syntax properties (static defaults)
	    // Comment constructs:                   
	  	line comment                           : "//"
	 	 	block comment                          : "/*" * "*/"
	    // Fences (used for matching,            
	  	// inserting, indenting brackets):       
	  	fences                                 : [ ]
	                                           ( )
	                                           { }
	                                           
	  	// Automatic indent hints                
	  	// (indent after these tokens):          
	  	indent after                           : "="
	    // Regular expression for identifiers:   
	  	identifier lexical                     : "[A-Za-z0-9_]+"	     
	
	module entity-builders    
		imports 
			entity.Common	  
			libstratego-lib
	 
		builders
    	builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
	 
	 	outliner Default outliner        
	    // Outliner rules indicate which syntactic constructs should be shown in the outline
		  // and quick outline views, and take one of the following forms:
		  //
		  //   <sort>.<constructor>
		  //
		  //   <sort>._
		  //
		  //   _.<constructor>
		  Start.Module
		  Definition.Entity 	
		
		folding Default folding definitions
  
		  // Folding rules indicate which syntactic constructs can be folded,
		  // and take one of the following forms:
		  //
		  //   <sort>.<constructor>
		  //
		  //   <sort>._
		  //
		  //   _.<constructor>
		  //
		  // To indicate that an element should always be folded, add
		  // a (folded) annotation:
		  //
		  //   _.Imports (folded)
		  //
		  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
		  //
		  //   Definition._ (disabled)
		  Start.Module
  		Definition.Entity
		 	
	module common
		imports 
			libstratego-lib
	
		lexical syntax
   
    [a-zA-Z][a-zA-Z0-9\_]* -> ID
    "-"? [0-9]+            -> INT
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
     
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions 
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]
