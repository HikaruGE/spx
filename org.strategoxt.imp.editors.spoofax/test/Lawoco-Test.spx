module Lawoco
	imports M2 

context-free syntax
  
    "module" Module@=ID Definition*     -> Start {"Module", scope(Entity, Module)}
    "entity" Entity@=ID "{" Member* "}" -> Definition {"Entity", scope(Property, Function)}
    Entity@ID Property@=ID              -> Member {"Property"}
		    Function@=ID "(" { Param "," }* ")" Stm -> Member {"Function", scope(Var)}
    Var@=ID ":" Entity@ID           -> Param {"Param"}
    
    Function@ID "(" {Exp ","}* ")"      -> Exp {"Call"}        %% or, could be an Entity 
    "var" Var@=ID ":" Entity@ID         -> Stm {"VarDecl"}
    "var" Var@=ID ":" Entity@ID "=" Exp -> Stm {"VarDeclInit"}
    Var@ID "=" Exp                      -> Stm {"Assign"}
    Var@ID                              -> Exp {"Var"}         %% or, could be a Property!
    Exp "." Property@ID                 -> Exp {"PropAccess"}
    "{" Stm* "}"                        -> Stm {"Block", scope(Var)}   
    

rules  	
	
	// Stratego Rules supporting code contracts 
	
	remove-quote: 
    s as String -> s' as String 
    with
      if explode-string => ['\'' | s_tail] then 
        s' := <implode-string> s_tail
      else
        s' := s
      end
	
	position-of-term1:
    [t | t* as List] -> position as List 
    where
    	is-list
    where
      if id then
        position := MARKER()
      else
        position := "test2"   
      end 
signature 
	constructors
	
	  COMPLETION : String -> Term 
	  NOCONTEXT  : Term   -> Term
	  MARKER     : Term
	
	  // Below are copies of the signatures of the terms used in example
	  // trans/test.str file. These definitions should also be automatically 
	  // generated in the imported include/Test.str module. However,
	  // to ensure that the example transformation doesn't break when the
	  // syntax is changed, we also hard-coded them here.
	          
	  Module   : ID * List(Entity)   -> Module
	  Entity   : ID * List(Property) -> Entity
	  Property : ID * Type           -> Property
	  Type     : ID                  -> Type   	  
 


