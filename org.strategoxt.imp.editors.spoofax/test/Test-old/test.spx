package test.A 
{	 
	module dummy2{  
		imports test.b::m1
		
		context-free start-symbols
  		Start  

		context-free syntax 
			Test4 A -> Start{cons("Program")}  
			 
		folding   
			Test5.Program    
				 
		completions
		  completion template : Start = "module " <m> (blank)        
		  completion template : A = "entity " <e> " {}" (blank) 
		
		rules 
			  test-rule1: "test" ->  <to-java><test-unzip-semantic-issuse-main(|[],[],[])>Program(1,2)       

		}	

	module dummy3{
		imports test.b::m2 
		
		context-free syntax 
			"int" Test5 ->  Test6{cons("Test6")}  
		 
		lexical syntax 
			"void" -> A
			
		rules 
			  test-rule1: "test" ->  <test-unzip-semantic-issuse-main(|[],[],[])>Program(1,2)    
			
	}
	
	
	module module-langauge
	{	
		imports 
			test.b
		context-free start-symbols
  		Start  

		context-free syntax 
			"module" ID Definition*       -> Start {cons("Module")}
	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
	    ID ":" Type                   -> Property {cons("Property")}
	    ID                            -> Type {cons("Type")}

		rules

		  to-java:
		    Module(x, d*) ->
		    $[ package [x];
		       
		       [d'*]
		     ]
		    with
		      d'* := <to-java> d*
			  
		  to-java:
		    Entity(x, p*) ->
		    $[ class [x] {
		           [p'*]
		       }
		     ]
		    with
		      p'* := <to-java> p*
	}
}
