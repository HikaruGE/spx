module ecore-to-xml
	
imports
	lib/ecore-signatures
	lib/xml/xml-doc
	
overlays 
	
	XMLAttribute(name, literal) = 
		Attribute(QName(None(), name), DoubleQuoted([Literal(literal)]))
	XMLAttribute(prefix, name, literal) = 
		Attribute(QName(Some(Prefix(prefix)), name), DoubleQuoted([Literal(literal)]))
		
strategies
	ecore-to-xml = topdown(try(to-xml))
		
rules
	to-xml:
		EPackage(name, children) -> Document(prologue, element, epilogue)
		where 
			xMLDecl := XMLDecl(VersionDecl(Version("1.0")), Some(EncodingDecl(Encoding("UTF-8"))), None());
			prologue := Prologue(Some(xMLDecl), [], None());
	
			qName := QName(Some(Prefix("ecore")), "EPackage");
			attributes := [
				XMLAttribute("xmi", "version", "2.0"),
				XMLAttribute("xmlns", "xmi", "http://www.omg.org/XMI"),
				XMLAttribute("xmlns", "xsi", "http://www.w3.org/2001/XMLSchema-instance"),
				XMLAttribute("xmlns", "ecore", "http://www.eclipse.org/emf/2002/Ecore"),
				XMLAttribute("xmi", "id", <conc-strings> ("id_", <new> name)),
				XMLAttribute("name", name),
				XMLAttribute("nsURI", "")		
			];
			element := Element(qName, attributes, children, None()); 
					
			epilogue := Epilogue([])		
		
	to-xml:
		EClass(name, children) ->  Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eClassifiers");
			attributes := [
				XMLAttribute("xsi", "type", "ecore:EClass"),
				XMLAttribute("xmi", "id", <conc-strings> ("id_", name)),
				XMLAttribute("name", name)
			]
	
	to-xml:
		EAttribute(name, type, []) -> Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eStructuralFeatures");
			attributes := [
				XMLAttribute("xsi", "type", "ecore:EAttribute"),
				XMLAttribute("xmi", "id", <conc-strings> ("id_", <new> name)),
				XMLAttribute("name", name),
				XMLAttribute("eType", type)		
			];
			children := []
	
	to-xml:
		EString() -> "ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
	to-xml:
		EInt() -> "ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"

	to-xml:
		EReference(name, UserDefined(type), properties) -> Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eStructuralFeatures");
			fixedAttributes := [
				XMLAttribute("xsi", "type", "ecore:EReference"),
				XMLAttribute("xmi", "id", <conc-strings> ("id_", <new> name)),
				XMLAttribute("name", name),
				XMLAttribute("eType", <conc-strings> ("id_", type)), 
				XMLAttribute("containment", "true")
			];
			optionalAttributes := properties;
			attributes := Conc(fixedAttributes, optionalAttributes);
			children := []
			
			
	to-xml:
		LowerBound(value) -> XMLAttribute("lowerBound", value')
		where
			value' := <int-to-string> value
		
	to-xml:
		UpperBound(value) ->  XMLAttribute("upperBound", value')
		where
			value' := <int-to-string> value
			