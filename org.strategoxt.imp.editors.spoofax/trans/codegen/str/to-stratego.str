module codegen/str/to-stratego
imports
  libstratego-lib
  libstratego-gpp
  libstrc
  include/libtemplatelang
	lib/editor-common.generated
imports
  include/SpoofaxLang
imports
	common
	config
	utils/debug
	utils/path
	utils/annotations
imports
	codegen/compile
  codegen/generate
	codegen/main
	codegen/sdf/to-name-analysis
  codegen/sdf/to-signature
imports
	context/-
imports
	normalize/signatures
	utils/contract
	common

rules
	// emit STR definition for the specified SPX module.
 	emit-str:
		m@Module(attrb* , modname , section*) -> m
		where
			with-spxverify(
	 			 project-path := <ProjectPath>
	 			 ; root-dir := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
	 			 ; package-typed-qname := <GetEnclosingPackageName>
				 ; module-typed-qname  := <GetEnclosingModuleName>
				 , !$[ Codegen | STR | Failed to create current scope.]
			)	  
		where
	 		!module-typed-qname  => Module(module-untyped-qname)
			; !package-typed-qname => Package(package-untyped-qname)
		 	; !modname             => SPXModuleName(modulename-string)
		 	; dbg-compiler(!$[CodeGen | STR | generating code for the following module : [<print-as-string>module-untyped-qname]])
		where
			emit-str-rtree(| package-untyped-qname, module-untyped-qname, root-dir)
			; emit-str-concrte-syntax (|package-untyped-qname, module-untyped-qname, root-dir)
	 	  ; dbg-compiler(!$[ Codegen | STR | Finishing generation of following module: [<print-as-string> module-untyped-qname].])


	// emit stratego concrete syntax
	emit-str-concrte-syntax(| package-untyped-qname, module-untyped-qname , root-dir) :
		str-rtree -> str-concrete-syntax
		where
			output-path-str 	    := <get-output-path(|"str")>(root-dir, module-untyped-qname)
   		; str-concrete-syntax := <to-str-string>str-rtree
			; <save-artifact(|package-untyped-qname, root-dir,output-path-str)> str-concrete-syntax

	// emit stratego rtree
	emit-str-rtree (|package-untyped-qname, module-untyped-qname , root-dir):
		Module(attrb* , modname , section*) -> str-aterm
		where
			with-spxverify(
				output-path-rtree    := <get-output-path(|"rtree")>(root-dir, module-untyped-qname)
				; ! " failed to get output-path-rtree @emit-str-rtree"
			)
			; str-section-def := <concat>[<collect-om(?STRSection(<id>), conc)> section* ,<get-name-analysis>section*, <get-pretty-printer>section*]
			; str-aterm := Module(
			 										 <qname-to-path>module-untyped-qname,
			 										 <conc>(<to-str-imports-block(|module-untyped-qname)>section*,
			 											  		str-section-def
			 													 )
			 										)
			; <save-artifact(WriteToBinaryFile | package-untyped-qname, root-dir,output-path-rtree)> str-aterm


  emit-default-strategies:
    () -> ()
    where
      with-spxverify(
        project-path := <ProjectPath>
        ; str-file-name := "Globals/TemplateLang"
        ; str-file-rel-path := $[[<get-autogenerated-artifacts-dir>]/[str-file-name]]
        , !" failed to setup properties e.g., project-path , enclosing package name and language-name string"
      )
    where
      dbg-compiler(! $[Codegen | STR | Generating default strategies])
      ; strategies-as-aterm  := <templatelang-stratego-runtime-support(|str-file-name)>
      ; strategies-as-string := <pp-stratego-string>
    where
      autogen-dir := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
      ; output-path-str     :=   $[[autogen-dir]/[str-file-name].str]
      ; output-path-rtree     := $[[autogen-dir]/[str-file-name].rtree]
      ; <ensure-path-exists>(project-path, $[[<get-autogenerated-artifacts-dir>]/Globals])
      ; chdir-to-project-path
    where
      <save-to-file>( output-path-str, strategies-as-string)
      ; <WriteToBinaryFile>(output-path-rtree, strategies-as-aterm)
      ; <refresh-file>output-path-str
      ; <refresh-file>output-path-rtree
      ; dbg-compiler(! $[ Codegen | STR | Finishing generation of default strategies])

rules
	// Generates main stratego module for the specified package-name
	generate-str-main:  
		module-qname* -> <id>
		where
			with-spxverify(
			 project-path             := <ProjectPath>
 			 ; Package(package-qname)   := <GetEnclosingPackageName>
 			 ; root-directory 					:= $[[project-path]/[<get-autogenerated-artifacts-dir>]]
 		  )
 		  ; dbg-compiler(!$[CodeGen | STR | Generate-str-main from package-name: [<print-as-string>package-qname]])
 		  ; with-spxverify(
	 			 main-str-module-name :=  <get-main-file-name><GetEnclosingPackageName>
				 ; str-aterm := Module(
				   	main-str-module-name, 
				   	<get-main-imports(|module-qname*)>
		 		 )
	 			 ; str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
		    )
		  ; with-spxverify(
			 		  <save-artifact(save-to-file      | package-qname , root-directory, <get-main-output-path(|main-str-module-name, "str")>(root-directory, package-qname))>str-string
					; <save-artifact(WriteToBinaryFile | package-qname , root-directory, <get-main-output-path(|main-str-module-name, "rtree")>(root-directory, package-qname))>str-aterm
		  	)
			; dbg-compiler(!$[ Codegen | STR | Generation of Main STR Module for package : [<print-as-string> package-qname] is done])

rules

  get-main-imports(|module-qname*) =
    ![Imports(<get-str-imports(|<GetEnclosingPackageName>)>module-qname*)]

	// get name analysis for  the specified sections
	get-name-analysis :  
		sections* -> result
		where
			sdf-section* := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)>sections*;
			Module(_, result) := <generate-name-analysis>sdf-section*
		<+
			dbg-compiler(!$[ Codegen | STR | Failed name analysis.])

  // get pretty printing strategies for syntax templates
  get-pretty-printer :
    section* -> result
    where
      with-spxverify(
        if templatelang-enabled then
          desugared-section* := <templatelang-desugar-top> section*;
          if GetEnclosingPackageName;get-language-name => lang-name then
            result := <template-sections-to-stratego(|lang-name)> desugared-section*
          else
            result := <template-sections-to-stratego> desugared-section*
          end
        else
          result := []
        end
        , !" failed to generate pretty printing strategies @get-pretty-printer"
      )

rules

	to-str-string: 
		sections* -> str-section-block
		where
			str-section-block := <parenthesize-Stratego; alltd(\Override() -> S("override")\); pp-stratego-string>sections*

	to-str-imports-block(|module-qname): 
		sections*  ->str-import-block
		where
			with-spxverify(
				verify( is-list |sections* , "expected List")
				; verify( ?QName(_)|module-qname , "expected:QName(_)")
				, !"to-str-imports-block failed in contracts validations" 
			)
			; spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
			if <ensure-list-is-not-empty>spx-import-stmt*  then
				str-import-block' := <to-generated-artifact-block(to-generated-artifacts-import-declarations(to-str-import), \s -> [Imports(s)]\)>spx-import-stmt*
			else
				str-import-block' := []
			end;
	    if templatelang-enabled; <fetch(?TemplateSection(_))> sections* then
	      templatelang-import* := [Import("libstratego-gpp"), Import("Globals/TemplateLang")] 
	    else
	      templatelang-import* := []
	    end;
			module-qualified-path := <qname-to-path>module-qname ;
			str-import-block := <flatten-list>[[Imports([templatelang-import*, Import(<get-signature-file-name>module-qualified-path)])], str-import-block']


rules

	// Returns the import statements for this package.
	// In addition, it imports Internal Signatures for this package
	// And by default add reference to libstratego-lib
	get-str-imports(|package-qname): 
		module-qnames* -> result
		where
			result' := <map(to-str-import);flatten-list>module-qnames*
		where
			<to-str-import><get_internal_module_qtname>package-qname => [_, sig-import];
			parenthesize-str-module-name := $[[<get-main-file-name>package-qname]-parenthesize];
			result := <conc>([Import("libstratego-lib"), Import(parenthesize-str-module-name), sig-import], result')

rules

	to-str-import:
		package-name -> [Import(package-name) , Import(<get-signature-file-name>package-name)]
		where
			<is-string>package-name

	to-str-import:
		legacy-artifact@Name(name)  -> 	result
 		where
			if(
				<is-declared-legacy-artifact> name
			<+
				<has-extension(|"str")+	has-extension(|"rtree")><get-enclosed-legacy-artifact-details>
			)
			then
				// Importing legacy artifact. Please note that , for legacy artifact, signatrue is not included
				// as it is taken care of during signature generation of _Internal module for every package.
				result :=  [Import(name)]
			else
				result :=  []
			end

	to-str-import:
		Module(q@QName(qnameparts*))->[Import(str-import),Import(sig-import)]
		where
			str-import:= <qname-to-path>q;
			sig-import:= <get-signature-file-name>str-import
