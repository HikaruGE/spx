module codegen/str/to-stratego
imports 
	libstrc
imports
  libstratego-lib
	lib/editor-common.generated
imports
  include/SpoofaxLang
imports 
	common
	config
	utils/debug	
	utils/path
	utils/annotations	
imports 	
	codegen/sdf/to-signature
	codegen/compile
	codegen/main
	codegen/generate-all
imports	
	context/signature
	context/scope-tree
imports	
	normalize/signatures
	utils/contract

	
	
rules
	// emitting STR definition for the specified SPX module.
 	emit-str:
		m@Module(attrb* , modname , section*) -> m
		with 
 			project-path := <ProjectPath>
 		with
 			package-typed-qname := <GetEnclosingPackageName> 
			;module-typed-qname  := <GetEnclosingModuleName> 
			<+ 
			<debug-compiler>$[ Codegen | STR | Failed to create current scope.] 
			;fail
		where
			 !module-typed-qname  => Module(module-untyped-qname)
			;!package-typed-qname => Package(package-untyped-qname)
			;!modname => SPXModuleName(modulename-string)
			; Module(_, _ , section') := <get-module-declaration>module-typed-qname
		where 
			<debug-compiler> $[CodeGen | STR | generating code for the following module : [<pp-aterm>module-untyped-qname]]
			;str-aterm := Module(<qname-to-path>module-untyped-qname, <conc>(<to-str-imports-block>section*, <collect-om(?STRSection(<id>), conc)> section*))
 			;str-string := <to-str-string>str-aterm	
		where
			 autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
			;output-path-str := <get-output-path(|"str")>(autogen-dir, module-untyped-qname)
    	;output-path-rtree := <get-output-path(|"rtree")>(autogen-dir, module-untyped-qname)
    	;<ensure-exists>( autogen-dir , package-untyped-qname ) 
			;chdir-to-project-path 
			;<save-to-file>( output-path-str, str-string )
			;<WriteToBinaryFile>( output-path-rtree, str-aterm)
			;<refresh-workspace-file>output-path-str
			;<refresh-workspace-file>output-path-rtree
		  
	
	/** 
	* Generates stratego MAIN output for the specified package-name
	*/	
	generate-str-main:  module-qname* -> <id>
		with 
 			 project-path             := <ProjectPath>
 			 ;Package(package-qname)   := <GetEnclosingPackageName>
 		with	 
 			 relative-autogen-path :=  <qname-to-path>package-qname
 			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
 		where 
 			<debug-compiler> $[CodeGen | STR | generate-str-main from package-name: [<pp-aterm>package-qname]]	  
 		where
 			 main-str-module-name := <concat-strings>[relative-autogen-path, "/", <get-main-file-name>package-qname] 
			;str-aterm := Module( main-str-module-name  ,[Imports(<map(to-str-import);flatten-list>module-qname*)])
			;str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
		where
			<debug-compiler> $[CodeGen | STR | str-string has been generated : [<pp-aterm>package-qname]]
		where
			// Saving str-content in the specified file
			// TODO : refactor and abstract file operation. 
			 autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
			;<ensure-exists>(autogen-root-directory , package-qname)
			;chdir-to-project-path // making sure that the current path is the project - path 
			;output-path-str   := <get-main-output-path(|"str")>(autogen-root-directory , package-qname)   
			;output-path-rtree := <get-main-output-path(|"rtree")>(autogen-root-directory , package-qname)   
			;<save-to-file>(output-path-str ,   str-string)		// saving str string 		
			;<WriteToBinaryFile>(output-path-rtree , str-aterm ) // saving rtree 
	 		;<refresh-workspace-file>output-path-str
			;<refresh-workspace-file>output-path-rtree
			


rules
	
	to-str-string: sections* -> str-section-block  
	where 
		str-section-block := <parenthesize-Stratego; pp-stratego-string>sections*

	to-str-imports-block : sections*  -> str-import-block
	with contracts( 
		contract-requires ( is-list |sections*)
	)
	where 
		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
		if <ensure-list-is-not-empty>spx-import-stmt*  then
			str-import-block := <to-generated-artifact-block(to-generate-artifacts-import-declarations(to-str-import), \s -> [Imports(s)]\)>spx-import-stmt*
		else
			str-import-block := []
		end		
			
	to-str-import: 
		package-name-> [Import(package-name) , Import(<get-signature-file-name>package-name)]
	
	to-str-import: 
		Module(q@QName(qnameparts*))->[Import(str-import),Import(sig-import)]
		where 
			str-import:= <qname-to-path>q;
			sig-import:= <get-signature-file-name>str-import
