module codegen/generate
imports 
	codegen/compile
	codegen/sdf/to-sdf
	codegen/sdf/to-signature 
	codegen/str/to-stratego
	codegen/esv/to-esv
	codegen/buildscripts
imports 
	config 
	common
imports	
	lib/editor-common.generated 
	include/SpoofaxLang
	include/libtemplatelang
imports	
	context/-
	normalize/signatures
imports 	
	utils/path 
	utils/annotations
	utils/contract
	utils/debug
	utils/cache
	analyze/main
	codegen/generate
	context/symboltable
	

rules
	build-all = 
		new-compile-session(
	  	get-package-list
			; compile-internal
			; <get-all-analyzed-modules-locations>()
			; mark-issues-of-file
			; if HasErrors 
			  then 
		  		<debug> $[Error during Compilation. Build Failed. Please fix the errors first.];
		  		index-close;
		  		fail
		  	else
		  		<debug> $[No Error during Compilation. Generating artefacts.];
		  		generate-spx-artifacts		
		 		end
	 )
	
	should-compile-forward-references = fail
	
	build-spx-incrementally =
		verify(?(ast, abs-path) |<id> , "?(ast, abs-path) ::build-spx-incrementally" );   
		compile-packages-of(
			should-compile-forward-references, 
			get-used-by, 
			generate-spx-artifacts
		) 
	
	generate-spx-artifacts = 
		if not(HasErrors) then
			packages := <get-package-list>
	 		; debug-time( 
			  	new-code-generate-session(
 					  init-code-generation
	 				  ; debug-time(
		  			  	<list-loop(
			  					generate-spx-package)>packages
				  	  | $[--Generating the artifacts for all the modified spx])
					  ;<filter(
					    		has-language-name-configured)>packages
		    		; emit-build-script 
					)
	  		| "--Code Generation done"
	  		) 
		else
			<debug>$[---------------- Compilation Failed.Please fix the errors before building the artifacts -----------------------]		
		end			
					
rules 
	new-code-generate-session(s) =
  	dbg-compiler(!$[-----------------::new-code-generate-session::-----------------]);
		with-spxverify(
			index-on-init-code-generation;
  		s;
  		index-on-complete-code-generation 
    	, !" new code generated session failed unexpectedly. "  
    )  
	
	refresh-file = refresh-workspace-file 

	//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
	//TODO: OPTIMIZE : DR can be used to construct this imports  

	// generates artifact for spx packages 
	generate-spx-package: 
		package-typed-qname@Package(untyped-qname) -> <id>
		where 
			dbg-compiler(!$[Generate| Generate code for spx-package| Generating Artifacts for following package: [<print-as-string>]]); 
			with-spxverify(
				if not(<get-declared(|CodeGenerated())>package-typed-qname)  then 
					{|GetEnclosingPackageName:
							with-spxverify(
						 		rules (GetEnclosingPackageName := package-typed-qname)
								, !"Setting GetEnclosingPackageName failed"
							);  
							enclosed-module-typed-qnames := <get-enclosed-dirty-modules-to-generate>package-typed-qname;
							
							<list-loop(
									generate-spx-module)>enclosed-module-typed-qnames;// Generates artifacts from all the modules 	
							
							<emit-internal-signatures>package-typed-qname;// generating internal signatures 
							
							// Since, the language-name is defined for this language 
							// generate all the main artifacts  for this package
							// if Language name is not defined for certain packaged, they will not be considered 
							// as a language , rather will be treated as a langauge library to be reused by other 
							// languages.
							if (<get-language-name> package-typed-qname) then
									<emit-package-signature-main>();
									<generate-main> package-typed-qname
							end
						|};		
						with-spxverify( <store-declared(|CodeGenerated())>package-typed-qname , "failed to store CodeGenerated()")
					end
					, ! $[Generate| generate-spx-package |[<print-as-string>package-typed-qname] Failed. ]
				)
	
	generate-spx-module: 
		module-typed-qname@Module(untyped-qname) -> <id>
		where 
			dbg-compiler(!$[generate-spx-module::Planning to generate module for semantic problems: [<print-as-string>]]) 
		where 
			with-spxverify(
				dbg-compiler (! $[generate-spx-module::Currently Generating : [<print-as-string>]]);
				{|GetEnclosingModuleName:
							// setting the current scope 
							rules( GetEnclosingModuleName := module-typed-qname);
					
							// generating code for the module id
							<generate-all>module-typed-qname	// generating all the artifacts for the specified module
				|}
				, !$[generate-spx-module:: [<print-as-string>module-typed-qname] Failed. ]
			)
			
	
	init-code-generation = with-spxverify(<emit-default-signatures>() , "Failed to emit default signatures") 
	
	generate-all =
		with-spxverify( 
			verify(?m@Module(QName(_)) |<id> , "?Module(QName(_))  ::generate-main")
			; get-original-module-definition
			; emit-sdf
			; emit-signatures 
		  ; emit-str
		  , !$[Failed to generate artifacts for module [<print-as-string>]]   
	  )  

	generate-main =
		with-spxverify(
			verify(?Package(QName(_)) |<id> , "?Package(QName(_))  @generate-main")
			;	get-enclosed-modules
			; generate-sdf-main
			; generate-str-main 
			; generate-esv-main
			, !$[Failed to generate artifacts for package [<print-as-string>]]
		)
	
	get-main-file-name : p@Package(QName(_)) -> <get-language-name>p

rules
	to-generated-artifact-block(adapter, post-coversion-adapter) : 
		list-stmt* -> resultant-block* 
		where 
			verify( List | list-stmt* , "List ::to-generated-artifact-block")
		where 
			<adapter>list-stmt*  => adapted-result*; // results are  adapted using the specified adapter
			<post-coversion-adapter>adapted-result*  => resultant-block*
	
	// generates the import declaration for the artifacts .  
	// s is a artifact specific adapted strategy applied to all the import declaration 
	// to get the artifact-specific import declaration. 
	to-generated-artifacts-import-declarations(s) =
		?imports*;	map(to-import-declaration(s)); flatten-list;	make-set
		; dbg-compiler(!$[Codegen | Imports | Resultant imports :  [<print-as-string>]]) 
		
	to-import-declaration(s): 
		i@ImportPackage(package-qname@QName(_)) -> results
		where 
			if not(<get-package-declaration>package-qname) then
				results := [] // unresolved imports. ignore. 
			else
				<get-enclosed-modules>Package(package-qname) => modules*;
				<map(?Module(<id>) ; qname-to-path ; s)> modules* => results
			end
		where
			dbg-compiler(!$[Codegen | Imports Conversion |  import package Result : [<print-as-string>results] ])
	
	to-import-declaration(s):		
		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <to-import-declaration(s)>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
	
	to-import-declaration(s):
		ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
		where
			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
			;if(not(<get-module-uri>Module(module-qname)))   then
				result := [] // unresolved imports. ignore. 
			else
				module-name-path    := <qname-to-path>module-qname
				;<s>module-name-path => result'
				;result := [result']  
			end
		where 
			dbg-compiler(!$[Codegen | Imports Conversion  | import module Result:  [<print-as-string>result]]) 
		 
	to-import-declaration(s): 
		ImportPackage(Name(package-name)) -> result
		where
			if <get-package-declaration>QName([package-name]) then
				<get-enclosed-modules>Package(QName([package-name])) => modules*
				;<map(?Module(<id>) ; qname-to-path ; s)> modules*   => result
			else
				 // since it is not declared as a spx package , it could be a legacy artifact . 
				 result := <to-import-declaration(s)>ImportLegacyArtifact(Name(package-name))
			end
		where 
			dbg-compiler(!$[Codegen | Imports Conversion  | import pcakage/legacy artifact Result :  [<print-as-string>result]]) 
	
	to-import-declaration(s): 
		ImportLegacyArtifact(Name(modulename)) -> result
		where 
				<s>Name(modulename) => result
		where 
			dbg-compiler(!$[Codegen | Imports Conversion |  import legacy artifact Result : [<print-as-string>result].])

rules 
	save-artifact(s | package-untyped-qname, root-directory,output-path) : 
		content -> content
		with 
			 <ensure-exists>(root-directory, package-untyped-qname)
		 	;<s>(output-path , content)
		 	;<refresh-file>output-path 
		 	;chdir-to-project-path
		
	
	save-artifact( | package-untyped-qname, root-directory,output-path) : 
		content -> <save-artifact( save-to-file | package-untyped-qname, root-directory,output-path)>content 

rules
	
	// Verifies wheter a particular list is empty or not.
	ensure-list-is-not-empty =  verify(is-list| <id> , "List ::ensure-list-is-not-empty"); is-not-empty-list
		
	has-language-name-configured = verify(?Package(QName(_)) | <id> , "Package(QName(_)) ::has-language-name-configured") ; where(get-language-name)

	
signature constructors
	GeneratedPackages : Type 	
	ImportedDef   : Type
	CodeGenerated : Flag 
	 
rules 
	index-generated-package-ids = 
			with-spxverify(
				? package-qnames 
				; <get-constructor> GeneratedPackages() => cons-name
				; activate-global-scope( 
				  	<undefine-symbol-definitions>(cons-name, GeneratedPackages()); 
				  	<index-symbol-definition>(cons-name, GeneratedPackages() , package-qnames)
			  	)
				, !"Failed index-generated-package-ids"  
			)  
			
		get-generated-package-ids = 
			<get-constructor>  GeneratedPackages() => key ;  
			activate-global-scope( 
				<resolve-symbol-definition>(key,  GeneratedPackages()) => package-qnames*
			);
			!package-qnames*
			
rules 
	
	index-imported-def-of-package =
			verify(
				?(key@Package(QName(_)) , value)
				|<id> , "?(key@Package(QName(_)) , value) ::index-imported-package-def"
			); 
			with-spxverify(
				<index-symbol-definition>(key, ImportedDef() , value)
			)  
			
	get-imported-defs-of-package = 
		verify(
			?p@Package(QName(_)) 
			|<id> , "?Package(QName(_)) ::get-generated-package-ids"
		);
		activate-scope(<resolve-all-symbol-definitions>(<id>,  ImportedDef()) => package-qnames*|p);  
		!package-qnames*				 