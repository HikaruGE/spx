module codegen/generate

imports 
	codegen/compile
	codegen/sdf/to-sdf
	codegen/sdf/to-signature 
	codegen/str/to-stratego
	codegen/esv/to-esv
	codegen/buildscripts

imports 
	config 
	common
imports	
	lib/editor-common.generated
	include/spoofaxlang
imports	
	context/scope-tree
	context/signatures
	normalize/signatures
imports 	
	utils/path 
	utils/annotations
	utils/contract
	utils/debug
	utils/cache
	analyze/main
	codegen/generate

rules 
	
	refresh-file = is-in-command-line-mode  < id + refresh-workspace-file 
	
	
strategies 
	build-all = 
		?current-term
		;enable-compiler-debugging
		;new-compile-session(
			list-of-package-qname* := <get-package-list> 
			;<compile-internal>list-of-package-qname*
			;<debug>$[......................Getting list of errors......................]
			;<get-all-analyzed-problems>() => problems  
			;if <fail-if-has-errors>problems then
			 	 <debug>$[......................Generating artifacts......................]
			 	;init-code-generation  
				;<list-loop(generate-spx-package)>list-of-package-qname*
				;<debug>$[......................Generating Build Scipt......................]
				;<emit-build-script> list-of-package-qname*
				;<debug>$[......................Code Generation is done......................] 		
			else
				<debug>$[Please fix the errors before building the artifacts:  [<pp-aterm-forced>problems]]
			end		 
		)
		;disable-compiler-debugging
		;!current-term //restoring current term to avoid side effects  
	
		
rules

	should-generate-code-this-package = 
		?package-qname;
		where(not(<PackageCodeGenerated>package-qname))
		
	// generates artifact for spx packages 
	generate-spx-package: 
		package-typed-qname@Package(untyped-qname) -> <id>
		where 
			<debug-compiler> $[Generate| Generate code for spx-package| Planning to Generate Artifacts : [<pp-aterm>]] 
		where
			if should-generate-code-this-package  then 
				{|GetEnclosingPackageName,GeneratedSignature: 
						rules ( GetEnclosingPackageName := package-typed-qname);
						enclosed-module-typed-qnames := <get-enclosed-modules>package-typed-qname;
						<list-loop(
								generate-spx-module
							)
						>enclosed-module-typed-qnames;
						<generate-main> enclosed-module-typed-qnames // generate all the main artifacts now  
				|};		
				where(
					rules(PackageCodeGenerated: package-typed-qname -> package-typed-qname)
				)
				<+
				<debug-compiler> $[Generate| generate-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
				;fail
			end
	
	// generates artifacts fro spx module
	generate-spx-module: 
		module-typed-qname@Module(untyped-qname) -> <id>
		where 
			<debug-compiler> $[Generate|  generate-spx-module> Planning to generate module for semantic problems: [<pp-aterm>]] 
		where 
			if not(<ModuleCodeGenerated>module-typed-qname) then
				<debug-compiler> $[Generate| generate-spx-module| Currently Generating : [<pp-aterm>]]; 
				module-decl* := <get-original-module-declaration>module-typed-qname;
				{|GetEnclosingModuleName:
						rules( GetEnclosingModuleName := module-typed-qname);
						<generate-all> module-decl* ;		// generating all the artifacts for the specified module
						<emit-package-signature-main>()
				|};
				module-abs-path := <DeclaredModule>untyped-qname;
				where(
					rules(
						ModuleCodeGenerated:     module-typed-qname -> module-typed-qname
					)
				)
				<+
				<debug-compiler> $[Generate| generate-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
				;fail
			else
				<debug-compiler> $[Generate| generate-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
			end		
			

//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
//TODO: OPTIMIZE : DR can be used to construct this imports  
rules 
	init-code-generation = where(<emit-default-signatures>()) 
		
	generate-all = emit-sdf;emit-signatures;emit-str <+ debug(!" Failed in Generate-all. "); fail

	generate-main = 
			?module-qname* ;generate-sdf-main;generate-str-main ; generate-esv-main 
		<+ 
			debug(!" Failed in Main Generation. "); fail    
			
			
rules
	
	to-generated-artifact-block(adapter, post-coversion-adapter) : list-stmt* -> resultant-block* 
	with contracts( 
		contract-requires(is-list |list-stmt*)
	)
	where 
		<adapter>list-stmt*  => adapted-result*; // results are  adapted using the specified adapter
		<post-coversion-adapter>adapted-result*  => resultant-block*


	ensure-list-is-not-empty =  is-not-empty-list
	
	
rules
	// generates the import declaration for the artifacts .  
	// s is a artifact specific adapted strategy applied to all the import declaration 
	// to get the artifact-specific import declaration. 
	to-generated-artifacts-import-declarations(s) =
		?imports*;	map(to-import-declaration(s)); flatten-list;	make-set; 	where(<debug-compiler>$[Codegen | Imports | Resultant imports :  [<pp-aterm>]]) 
		
	
		
	to-import-declaration(s): 
		i@ImportPackage(package-qname@QName(_)) -> results
		where 
			if not(<DeclaredPackage>package-qname) then
				results := [] // unresolved imports. ignore. 
			else
				<get-enclosed-modules>Package(package-qname) => modules*;
				<map(?Module(<id>) ; qname-to-path ; s)> modules* => results
			end
		where
			<debug-compiler>$[ Codegen | Imports Conversion |  import package Result : [<pp-aterm>results] ]
	
	to-import-declaration(s):		
		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <to-import-declaration(s)>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
	
	to-import-declaration(s):
		ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
		where
			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
			;if(not(<DeclaredModule>module-qname))  then
				result := [] // unresolved imports. ignore. 
			else
				module-name-path    := <qname-to-path>module-qname
				;<s>module-name-path => result'
				;result := [result']  
			end
		where 
			<debug-compiler>$[ Codegen | Imports Conversion  | import module Result:  [<pp-aterm>result]] 
		 
	to-import-declaration(s): 
		ImportPackage(Name(package-name)) -> result
		where
			if <DeclaredPackage>QName([package-name]) then
				<get-enclosed-modules>Package(QName([package-name])) => modules*
				;<map(?Module(<id>) ; qname-to-path ; s)> modules*   => result
			else
				 // since it is not declared as a spx package , it could be a legacy artifact . 
				 result := <to-import-declaration(s)>ImportLegacyArtifact(Name(package-name))
			end
		where 
			<debug-compiler>$[ Codegen | Imports Conversion  | import pcakage/legacy artifact Result :  [<pp-aterm>result]] 
	
	to-import-declaration(s): 
		ImportLegacyArtifact(Name(modulename)) -> result
		where 
				<s>Name(modulename) => result
		where 
			<debug-compiler>$[Codegen | Imports Conversion |  import legacy artifact Result : [<pp-aterm>result].]
	
	

	
	
				 