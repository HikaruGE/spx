module codegen/main

imports 
	codegen/compile
	codegen/sdf/to-sdf
	codegen/sdf/to-signature 
	codegen/str/to-stratego
	codegen/esv/to-esv
imports
	codegen/buildscripts
imports 
	config 
	utils/cache
	lib/editor-common.generated
	context/scope-tree
	context/signature
	normalize/signatures 
	include/spoofaxlang
	utils/path
	
rules 
	build-all:
		(selected, position, ast, path, project-path) -> None()
		where
			debug(!"=============starting compile-all ===================")
		with 
			editor-init;
		  initialize-configuration
		with
			rules(ProjectPath := project-path)
		with
	  	<build-all>()
	  /*	
	  	 <to-sdf-all> (selected, path , project-path)
	  	;<to-signature-all> (selected, path,project-path)
		with	
			<to-str-all>(selected, path , project-path)
		with	
			<to-esv-all>(selected, path , project-path)
		where 
			<emit-build-script>(project-path, <Autogenerated-Artifacts-Dir>, "", "")
		*/
		
rules
	//Intregation Test of the compile-all is working as expected 
	compile-all:
		(selected, position, ast, path, project-path) -> None()
		where
			debug(!"=============starting compile-all ===================")
		with 
			editor-init;
		  initialize-configuration
		where
			<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
		with 
			compile-all
	
rules 
	transform-import-declaration(s): 
		ImportPackage(qname@QName(package-qname-parts*)) -> result 
		where
			package-name-path    := <qname-to-path>qname
			;<s>package-name-path => result  
	
	transform-import-declaration(s): 
		ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
		where
			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
			;module-name-path    := <qname-to-path>module-qname
			;<s>module-name-path => result  
	
	transform-import-declaration(s): ImportPackage(Name(package-name)) -> result
	where 
		<s>package-name => result 
		
	transform-import-declaration(s): ImportLegacyArtifact(Name(modulename)) -> result
	where 
		<s>modulename => result 
	