module buildscripts

imports 
  libstratego-lib
  libstratego-sdf
  libstratego-sglr
  libstratego-gpp
  libstratego-aterm
  libstrc
  lib/editor-common.generated
  lib/sdf-desugar
  lib/sdf-parenthesize
imports 
	include/SpoofaxLang
imports 
	common

rules
	
	emit-build-script: (project-path, library-root , current-package-root , package-name) -> None()
		with 
			autogen-ant-output-file-name := "build.spx.package.generated"
			;autogen-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", "build.spx.package.generated")
			;ant-package-output-name := $[[<string-replace(|"/", "."); string-replace(|"\\", "."); string-replace(|":", ".")>current-package-root].[package-name]]
			;packagespecific-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", $[build.spx.package.[ant-package-output-name]])
		where
			 <dirname; ensure-directory-exists>autogen-ant-output-path  
			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
		where
			 <dirname; ensure-directory-exists>packagespecific-ant-output-path  
			;<save-to-file>(
			 								packagespecific-ant-output-path, 
			 								<get-packagespecific-ant-script-string>(library-root , 
			 																												current-package-root , 
			 																												package-name,
		 																													ant-package-output-name,
			 																												autogen-ant-output-file-name) 
			 								)
	
	
	//TODO : replace package-name with fully qualified package. 
	 
	get-packagespecific-ant-script-string:(packages-root , current-package-root , package-name, package-qname, autogen-ant-output-file-name) ->
$[<?xml version="1.0" encoding="UTF-8" ?>
<project name="build.[package-name]" default="build-spx-packages">
        
		<!-- autogenerated artifacts relative directory path -->	
		<property name="packages.root" location="[packages-root]"/>
		
		<!-- prject directories -->
    <property name="trans" location="trans"/>
    <property name="src-gen" location="editor/java"/>
    <property name="syntax" location="syntax"/>
    <property name="include" location="include"/>
    <property name="lib" location="lib"/>
    <property name="build" location="bin"/>
    <property name="dist" location="bin/dist"/>
    
		<!-- Environment configuration for command-line builds -->
    <property name="build.sdf.imports" value= "-I &quot;${packages.root}&quot;"/>
    <property name="build.stratego.args" value="
                    --library
                    -I &quot;${packages.root}&quot;
                    -I &quot;${basedir}&quot;
                    -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>

		<condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
        <isset property="eclipse.spoofaximp.nativeprefix"/>
    </condition>
    <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>

    
	<import file="[autogen-ant-output-file-name].xml"/>
	
	<target name="build.[package-qname].package">
		<property name="package.name" value="[package-name]"/>
		<property name="package.path" location="[packages-root]/[current-package-root]"/>
		<property name="package.main.sdf.module" value="[package-name]-main"/>
		<property name="package.main.str.module" value="[package-name]-main"/>
		<property name="package.main.esv.module" value="[package-name].main"/>
		<property name="metasdfmodule" value="Stratego-[package-name]"/> 

		<antcall target = "spx.default">
		  	<param name = "package.name" value = "${package.name}"/>
			<param name = "package.path" value = "${package.path}"/>
		 	<param name = "package.main.sdf.module" value = "${package.main.sdf.module}"/>
			<param name = "package.main.str.module" value = "${package.main.str.module}"/>
		 	<param name = "package.main.esv.module" value = "${package.main.esv.module}"/>
			<param name = "metasdfmodule" value = "${metasdfmodule}"/>
		</antcall>
	</target>
	<!-- Main target -->
  <target name="build-spx-packages" depends="build.[package-qname].package"/>
</project>] 
	
			
	
	
	get-ant-autogeneratedscript : () ->
$[<?xml version="1.0" encoding="UTF-8" ?>

<project name="build.spx.generated">
		
		<target name="spx.default" depends="spx.default.ctree"/>
    <target name="spx.default.ctree" depends="check-classpath,init,pack-sdf,copy-sdf,java.jar,stratego.ctree,sdf2imp, refresh"/>
        
    <!-- Initialization -->
    <available file="${build}/org/strategoxt/imp/editors/spoofax/strategies/Main.class" property="java.jar.enabled"/>
    <condition property="java.jar.import" value="-la org.strategoxt.imp.editors.spoofax.strategies" else="">
        <isset property="java.jar.enabled"/>
    </condition>
    <condition property="java.jar.classpath" value=":${include}/${package.main.str.module}-java.jar" else="">
        <isset property="java.jar.enabled"/>
    </condition>
    <available file="${package.path}/${package.main.str.module}.rtree" property="build.stratego.enabled"/>
    <dirname property="externaldefdir" file="${externaldef}"/>
    <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
        <isset property="externaldef"/>
    </condition>
    <condition property="externaljarimport" value=":${externaljar}" else="">
        <isset property="externaljar"/>
    </condition>
    <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
        <isset property="eclipse.running"/>
    </condition>
    <condition property="externaljarflags" value="${externaljarflags}" else="">
        <isset property="externaljarflags"/>
    </condition>
    <condition property="metasdfmodule.available" value="1">
        <available file="${package.path}/${metasdfmodule}.sdf"/>
    </condition>
    
	<fail unless="build" message="Please use build.spx.main.xml to build this project or configure the required properties manually"/>
    <mkdir dir="${build}"/>
    <mkdir dir="${src-gen}"/>
    <mkdir dir="${dist}"/>
    <mkdir dir="${include}"/>
    <mkdir dir="${lib}"/>
    <mkdir dir="${syntax}"/>

		<target name="init" if="eclipse.running">
            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
                <arg value="${include}"/>
            </java>
		</target>
		      
		<target name="check-classpath">
        <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
        <antcall target="check-classpath.helper"/>  
		</target>
  	
		<target name="java.jar" if="java.jar.enabled">
    		<jar basedir="${build}" excludes="{packages.root}/**" update="true" destfile="${include}/${package.name}-java.jar"/>
 		</target>
		
		<target name="check-classpath.helper" unless="check-classpath.available">
	        <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
	        <echo level="error" message="Make sure it is on the class path."/>
	        <echo level="error" message=""/>               
	        <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
	        <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
	        <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
	        <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
	        <fail/>
	    </target>
	        
		<!--lots of redundant steps. TODO : remove the redundant build steps-->
		<target name="refresh" if="eclipse.running">
    		<eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
        <eclipse.convertPath fileSystemPath="${packages.root}" property="packagesroot.dir"/>
        <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
				<eclipse.convertPath fileSystemPath="${include}" property="includedir"/>
				<eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
				<eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>	
			
				<eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
				<eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
				
				<eclipse.refreshLocal resource="${package.path}" depth="infinite"/>
				<eclipse.refreshLocal resource="${packages.root}" depth="infinite"/>
				
				<eclipse.refreshLocal resource="${projectdir}/build.spx.autogenerated.xml" depth="infinite"/>
				<eclipse.refreshLocal resource="${packagesroot.dir}" depth="infinite"/>
				<eclipse.refreshLocal resource="${includedir}" depth="infinite"/>
            
        <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
        <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
    </target>
        
		<target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
        <mkdir dir="utils"/>
        <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
        <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
        <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
        <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
  	</target>
    
		<target name="copy-sdf" if="externaldef">
	  		<copy file="${externaldef}" tofile="${include}/${package.name}.def" preservelastmodified="true"/>
    </target>
	
    <target name="pack-sdf" unless="externaldef">
        <dependset>
            <srcfileset dir="${packages.root}">
                <include name="**/*.sdf"/>
            </srcfileset>
            <srcfileset dir="${lib}">
                <include name="**/*.def"/>
            </srcfileset>
            <targetfileset file="${include}/${package.name}.def"/>
        </dependset>
        <available file="${include}/${package.name}.def" property="pack-sdf.available"/>
        <antcall target="pack-sdf.helper"/>
    </target>

    <target name="pack-sdf.helper" unless="pack-sdf.available">
        <condition property="utils-include" value="-I ${utils}" else="">
            <available file="${utils}"/>
        </condition>
        <java classname="run" failonerror="true">
            <arg value="org.strategoxt.tools.main-pack-sdf"/>
            <arg value="-i"/>
            <arg value="${package.path}/${package.main.sdf.module}.sdf"/>
            <arg value="-o"/>
            <arg value="${include}/${package.name}.def"/>
            <arg value="-I"/>
            <arg value="${package.path}"/>
            <arg value="-I"/>
            <arg value="${lib}"/>
            <arg line="${utils-include}"/>
            <arg line="${build.sdf.imports}"/>
        </java>
    </target>

  	<target name="copy-jar" if="externaljar">
  		<copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
    </target>

	
		<!-- Stratego to Java interpreter -->
    <target name="stratego.ctree" >
    	<dependset>
      		<srcfileset dir="${packages.root}">
          	<include name="**/*.rtree"/>
      			<include name="**/*.str"/>
          </srcfileset>
    			<srcfileset dir="${lib}">
    	    	<include name="**/*.str"/>
    				<exclude name="lib/editor-common.generated.str"/>
    	    </srcfileset>
    	    <targetfileset file="${include}/${package.name}.ctree"/>
      </dependset>
      <available file="${include}/${package.name}.ctree" property="strc-java.available"/>
      <antcall target="copy-jar"/>
      <antcall target="stratego.jvm.helper">
      	<param name="build.stratego.outputfile" value="${include}/${package.name}.ctree"/>
      	<param name="build.stratego.extraargs" value="-F"/>
      </antcall>
    </target>
        
    <target name="stratego.jar.deletehelper" unless="strc-java.available">
	    <delete>
	      <fileset dir="${src-gen}" includes="trans/**"/>
        <fileset dir="${build}" includes="trans/**"/>
      </delete>
	  </target>
            
  <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
  	<delete file="${include}/${package.name}.rtree" failonerror="false"/>
  	<java classname="org.strategoxt.strj.Main" failonerror="true">
  		<arg value="-I"/>
    	<arg value="${packages.root}"/>
  		<arg value="-i"/>
      <arg value="${package.path}/${package.main.str.module}.str"/>
      <arg value="-o"/>
      <arg value="${build.stratego.outputfile}"/>
  		<arg value="-p"/> 
  	  <arg value="test"/><!-- Todo : reconsider whether this extra args are needed -->
      <arg value="--library"/>
      <arg value="--clean"/>
  		<arg line="${build.stratego.args}"/>
      <arg line="${build.stratego.extraargs}"/>
      <arg line="${externaljarflags}"/>
      <arg line="${externaldefimport}"/>
      <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
  </java>
  <delete file="${include}/${package.name}.rtree" failonerror="false"/>
  <mkdir dir="${build}/trans"/>
</target>
                
		<target name="clean" description="clean up">
      <delete dir="${build}"/>
      <delete file="${include}/${package.main.sdf.module}.def"/>
      <delete dir="${src-gen}/trans"/>
		</target>
	
	  <target name="sdf2imp" depends="sdf2imp.eclipse"/>
	        
		<target name="sdf2imp.eclipse" if="eclipse.running" >
			<copy file="${package.path}/${package.main.esv.module}.packed.esv" tofile="${include}/${package.main.esv.module}.packed.esv" preservelastmodified="true"/>
		</target>
	
</project>
]

	