module 
	codegen/sdf/to-signature
imports 
	libstratego-sglr
imports
	lib/editor-common.generated
imports 
	config
	common
imports 
	context/sdf/declare-signature
	context/sdf/declare
	codegen/sdf/to-sdf
	include/spoofaxlang
imports
	codegen/compile
	codegen/main
	context/signature
	normalize/signatures
imports 
	utils/path
	utils/debug	
	
rules
	
	// TODO : OPTMIZE : add a pretty printer to convert operation name DR to STR Signatures. 
	// Currently , using string interpolation, signature are generated . then it is reparsed to
	// to convert it to aterm. Get rid of this. 
	  
	parse-str-string =
    parse-string(
      strsglr-report-parse-error
    | <import-term(lib/Stratego-Sugar.tbl)>
    )  
	
	to-signature-as-rtree =   
		parse-str-string ; pp-aterm
	
	emit-signatures:
		m@Module(attrb* , modname , section*) -> m
		with 
 			project-path := <ProjectPath>
 		with
 			package-typed-qname := <GetEnclosingPackageName> 
			;module-typed-qname  := <GetEnclosingModuleName> 
			<+ 
			<debug-compiler>$[Codegen | Failed to create current scope.]
			;fail
		where
			 !module-typed-qname  => Module(module-untyped-qname)
			;!package-typed-qname => Package(package-untyped-qname)
			;!modname => SPXModuleName(modulename-string)
		where 
			sig-file-name := <get-signature-file-name><qname-to-path>module-untyped-qname
		where 
			<debug-compiler>$[Codegen|Generating signature for the following package : [<pp-aterm>module-typed-qname]]			
			;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>
			;<debug-compiler> $[Codegen|generated signatures : [generated-signatures-string ]] 
			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
		where  
			autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
			;output-path-str 		:= <get-output-path(|"signature", "str")>(autogen-dir, module-untyped-qname)
			;output-path-rtree 		:= <get-output-path(|"signature", "rtree")>(autogen-dir, module-untyped-qname)
		where
			<debug-compiler> $[Codegen|otuput path for signatures : [output-path-str]]		
			;<ensure-exists>( autogen-dir , package-untyped-qname ) 
			;<save-to-file>( output-path-str, generated-signatures-string)
			;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
			;<refresh-workspace-file>output-path-str
			;<refresh-workspace-file>output-path-rtree
			;chdir-to-project-path
		where
			<debug-compiler>$[ Codegen | SDF | Finishing generation of Signature for [<pp-aterm> module-untyped-qname].]
	
rules 

	// Instead of using String interpolation, Generate the default signatures
	// using global contructor defined during init-declartion   
	get-signature-contents(|moduleName): signatures-string ->
$[module [moduleName]
signature
    constructors
       [signatures-string]
				
signature
    constructors
          Some : a -> Option(a) 
          None : Option(a)

signature
    constructors
          Cons : a * List(a) -> List(a)
          Nil  : List(a)
          Conc : List(a) * List(a) -> List(a)
]  
 
    	
	get-all-signatures-as-string= 
			<mapconcat(bagof-Get-Operation-Declaration);operation-decl-to-string>
			<filter(?(<GetEnclosingPackageName>, <GetEnclosingModuleName>, _))>
			<all-keys-Get-Operation-Singature>
  
  operation-decl-to-string : [] -> $[]
  
  operation-decl-to-string : [first-op-decl | rest-op-decl* ]	-> $[[current-op-decl-string][rest-op-decl-string]]
  where 
  	(opname, operands*, resultant-sort) := first-op-decl
  	;if (!operands* => []) then
  		current-op-decl-string := $[[<opname-to-string>opname]: [resultant-sort]]
  	else
  		current-op-decl-string := $[[<opname-to-string>opname]: [<lhs-operands-to-string>operands*] -> [resultant-sort]]
  	end		 
  ;rest-op-decl-string := <operation-decl-to-string> rest-op-decl* 
 	
 	opname-to-string : opname -> opname-string
 	where 
 		if (!opname => "") then 
 			opname-string := $[]
		else
			opname-string  := opname
		end
				
  lhs-operands-to-string : [] -> $[]
  lhs-operands-to-string : [last] -> $[[last]] 
  lhs-operands-to-string : [hd-operand|rest*] -> $[[hd-operand-string] * [rest-operand-string]]
  where
  	not (![] => rest*) 
  where 
  	hd-operand-string := hd-operand 
  	;rest-operand-string := <lhs-operands-to-string>rest*
  	  