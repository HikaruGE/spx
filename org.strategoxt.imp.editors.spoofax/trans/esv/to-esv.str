module esv/to-esv
imports 
	libstratego-lib
imports
  common
  spoofaxlang
imports 
	include/SpoofaxLang
	
signature constructors
  Module : ID * Imports * List(Section) -> Module

rules 

	/**
	* Packs all the esv definitions for the namespace and combine them as a 
	* single *.main.packed.esv and store it in .showdow dir
	* 
	* OPTIMIZATION : If we allow arbitary order of different sections of ESV , 
	*								then we can avoid store-esv-definitions .
	*/
	to-esv-all: 
		(def, path , project-path)  -> None()
		with 
			declared-concept-entries  := <get-all-declared-entries>
 			;(package-name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
 			; package-main-esv-name :=   $[[package-name].main.packed]
 		where 
 			{|Declared-Language-Description,Declared-Builders-Description,Declared-Colorer-Description,
 				Declared-Folding-Description,Declared-Outliner-Description,Declared-References-Description,
 				Declared-Completions-Description:
 						<map-declarations(store-esv-defintions)>declared-concept-entries
 						;sections := <conc>(
 						 							<add-package-ctree>(package-name),  
 						 							<all-keys-Declared-Language-Description>, 
 			 										<all-keys-Declared-Builders-Description> ,  
 			 										<all-keys-Declared-Colorer-Description> , 
 			 										<all-keys-Declared-Folding-Description>,
 			 										<all-keys-Declared-Outliner-Description>,
 			 										<all-keys-Declared-References-Description>,
 			 										<all-keys-Declared-Completions-Description>
 			 										)
 			|} 										
 			;esv-aterm := Module(package-main-esv-name, <get-all-imports>, sections) //TODO  : Q>> why do we need imports in main.packed.esv  ?
 			//saving paked.esv 
 			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
 			;output-path-esv := <get-fullyqualified-autogen-path(|"esv")>(project-path,autogen-dir,package-main-esv-name)
			;<dirname; ensure-directory-exists>output-path-esv 
			//;<save-to-file>(output-path-esv,<pp-aterm>esv-aterm)
			;<WriteToBinaryFile>(output-path-esv,esv-aterm)

	
	/*
	* Adding package ctree as the default semantic provider0
	* 
	* @type packagename -> default semantic provider 
	*/
	add-package-ctree : package-name -> [SemanticProvider(package-output-ctree)]
		where 
				package-output-ctree := $[include/[package-name].ctree]
	
	/*
	* Returns all the imports for the current namespace.
	*/
 	get-all-imports = 
 		if (<length><get-all-declared-entries> => 0) then 
 			import-decl*  := []
 		else
 			import-decl*  := <project-allkeys-declared(to-esv-import)><get-all-declared-entries>
 		end
 		;!Imports(import-decl* ) 		
	
	 		
rules
	
	/**
	* Converts ( package-name , concept-name) to stratego import
	* 
	* @type ( package-name, concept-name) -> Import(name) 
	*/		
	to-esv-import:(p-name , c-name) -> Import(result) 
		where 
				result := $[[<get-qualified-importpath>(p-name,c-name)]]
 
rules			   
 	
 	/**
 	* Storing different Esv langauge definitions so that it can be 
 	* combined in *.main.packed.esv in a particular order 
 	*/
 	store-esv-defintions:
 		p@(package-name, concept-name, def) -> p
		 with
		 	<alltd(store-esv-def)> def 
 
 	/**
 	* Storing Esv Definitions that specifies Langauge 
 	*/
 	store-esv-def : l@Language(_,_) -> l
 		with 
 			rules ( Declared-Language-Description :+ l -> l)
 	
 	/**
 	* Storing Esv Definitions that specifies the builders for the 
 	* langauge definition. 
 	*/
 	store-esv-def : b@Builders(_,_) -> b
 		with 
 			rules ( Declared-Builders-Description :+ b -> b) 
 	
 	/**
 	* Storing Esv Definitions that specifies the colorer for the 
 	* langauge definition. 
 	*/
 	store-esv-def : c@Colorer(_,_) -> c
 		with 
 			rules ( Declared-Colorer-Description :+ c -> c) 
 	
 	/**
 	* Storing Esv Definitions that specifies the folding semantics for the 
 	* langauge definition. 
 	*/
 	store-esv-def : f@Folding(_,_) -> f
 		with 
 			rules ( Declared-Folding-Description :+ f -> f)
 	
 	/**
 	* Storing Esv Definitions that specifies the outliner for the 
 	* langauge definition. 
 	*/		
 	store-esv-def : o@Outliner(_,_) -> o
 		with 
 			rules ( Declared-Outliner-Description :+ o -> o)
 	/**
 	* Storing Esv Definitions that specifies the code completion
 	* for the langauge definition. 
 	*/
 	store-esv-def : c@Completions(_,_) -> c
 		with 
 			rules ( Declared-Completions-Description:+ c -> c)
 	
 	/**
 	* Storing Esv Definitions that specifies the refencen resolving constructs
 	* for the langauge definition. 
 	*/
 	store-esv-def : r@References(_,_) -> r
 		with 
 			rules ( Declared-References-Description :+ r -> r)
 	
 	/*
 	* optimization - ignores following section that are not relevant to the current computations.
 	*		a] str sections
 	*		b] sdf sections
 	*/
 	store-esv-def : s@SDFSection (_) -> s //Do nothing
 	
 	store-esv-def : s@STRSection (_) -> s //Do nothing
 	 
 	
 	 