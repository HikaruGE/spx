module spoofaxlang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  libstratego-sdf
  libstrc
  include/SpoofaxLang
  lib/editor-common.generated
  lib/sdf-desugar
  lib/sdf-parenthesize

signature constructors
  
  Module : ID * List(Import) * List(Section) -> Module

rules

  editor-analyze = !([], [], [])
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term

  generate-sdf:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"sdf")> path;
      result   := <pp-sdf-string'> <to-sdf> (path, selected)

  pp-sdf-string' =
    sdf-desugar;
    parenthesize-Sdf2;
  	sdf-ppfix;
    ast2box(|[<pp-table-sdf>]);
    box2text-string(|80)

  generate-str:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"str")> path;
      result   := <pp-stratego-string> <parenthesize-Stratego> <to-str> (path, selected)

  generate-esv:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|".packed.esv")> path;
      result   := <to-esv> (path, selected)
  
  find-spoofax-module-name:
    (path, def) -> name
    with
      Module(name, _) := def
    <+
      name := <remove-extension> <base-filename> path

rules

  to-sdf:
    (path, def) -> 'module(name', [], [exports(sections')])
    with
      name := <find-spoofax-module-name>;
      if !name => ParamName(n, p) then
        name' := parameterized(n, p)
      else
        Name(name') := name
      end;
      sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def;
      sections' := <list-to-conc-grammars> sections
  
  list-to-conc-grammars:
    [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
  
  list-to-conc-grammars:
    [g1] -> g1
  
  list-to-conc-grammars:
    [] -> []

rules

  to-str:
    (path, def) -> Module(name', sections)
    with
      name := <find-spoofax-module-name>;
      if !name => ParamName(n, p) then
        name' := n
      else
        Name(name') := name
      end;
      sections  := <collect-om(?STRSection(<id>), conc)> def

rules

  to-esv:
    (path, def) -> Module(name', [], sections)
    with
      name := <find-spoofax-module-name>;
      if !name => ParamName(n, p) then
        name' := n
      else
        Name(name') := name
      end;
      sections  := <collect-om(?ESVSection(<id>), conc)> def
