module spoofaxlang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  libstratego-sdf
  libstrc
imports
  common
  analysis
  include/SpoofaxLang
  lib/editor-common.generated
imports
  str/main
  str/to-stratego
imports  
  sdf/main
  sdf/to-sdf
  sdf/to-signature
  sdf/analysis 
  sdf/check
imports
  esv/to-esv
  esv/main


rules
 	editor-analyze:
    (ast, path, project-path) -> (all-error*, all-warning*, notes-sdf*)
    with 
    	<analyze-ast> (ast, path, project-path)
    	;<debug>$[Spoofax-lang|Analysis is done.]
    where 
     	(error-sdf* , warning-sdf*, notes-sdf*):= <editor-analyze-sdf>(<Analyzed-ast> , path, project-path)
   	where   
   	 	(error-str* , warning-str*, notes-str*):= <editor-analyze-str>(<Analyzed-ast>  , path, project-path)
    where 
     (error-esv* , warning-esv*, notes-esv*):= <editor-analyze-esv>(<Analyzed-ast>  , path, project-path)
   	where
     	 all-error* := <flatten-list>[error-sdf*, error-str*,error-esv*]
     	;all-warning* := <flatten-list>[warning-sdf*, warning-str*,warning-esv*]
     	;if not(![]; ?all-error*) then  
      	  <debug>$[Spoofax-lang|SDF Errors: [<flatten-list;pp-aterm>error-sdf*]]
      	 ;<debug>$[Spoofax-lang|STR Errors: [<flatten-list;pp-aterm>error-str*]]
      	 ;<debug>$[Spoofax-lang|ESV Errors: [<flatten-list;pp-aterm>error-esv*]]
      end  
 		
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <propose-completion <+ ![]> node
 
  editor-resolve:
    (sort(x), position, ast, path, project-path) -> target
    where
      target := <Declaration> x
 
  editor-resolve:
    (unparameterized(x), position, ast, path, project-path) -> target
    where
      target := <parse-spoofaxlang-file> <resolve-import> x

  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := ast // we just return the input term


rules 
	generate-all:
		(selected, position, ast, path, project-path) -> None()
		with 
			<analyze-ast>(ast, path, project-path)
    with
      <to-sdf-all> (selected, path , project-path)
     ;<to-signature-all> (selected, path,project-path)
		with	
			<to-str-all>(selected, path , project-path)

rules	 

	// Generate Signature for SDF Definition
	generate-signatures-from-SDF:
		(selected, position, ast, path, project-path) -> None()
		where //verify that there is no errors exists. If exist, stop further signature generation process 
			 <debug>$[Compiling SDF Definition.]
			 ;<editor-analyze> (ast, path, project-path)
			 ;if not(get-sdf-errors) <+ ([] := <flatten-list><get-sdf-errors>) then 
					source-sdf		:= <remove-extension><base-filename> path
					//;genpath		:= <remove-extension> path
					//;<file-exists ; filemode ; isdir <+ mkdir> genpath
					;genpath := <concat-strings>[ project-path , "/" , <dirname>path]
					;<chdir>genpath
					;<debug>$[Generating Signatures.]	   
					;generated-signature-module-name := <concat-strings>[source-sdf, "-signature"] 
					;generated-signatures :=  <get-signature-contents(|generated-signature-module-name)><get-all-signatures-as-string> 
					;gen-file-name := $[[generated-signature-module-name].str]  
					;<save-to-file>( gen-file-name, generated-signatures) 
				else
					errors := <get-sdf-errors>
	        ;<debug(!"Compiling failed for following SDF definition: ")> <base-filename> path
    			;<debug(!"Following errors has been encountered:")> <pp-aterm>errors
				end	 
rules 
	
	//Generate ESV Definition from SPX
  generate-esv:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|".packed.esv")> path;
      result   := <to-esv> (path, selected) 
