module spoofaxlang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  libstratego-sdf
  libstrc
  include/SpoofaxLang
  lib/editor-common.generated
  lib/sdf-desugar
  lib/sdf-parenthesize
  stratego/main
  stratego/to-stratego
  
  sdf/main
  sdf/to-sdf
  sdf/analysis 
  sdf/check
  esv/to-esv
  analysis

signature constructors
  Module : ID * List(Import) * List(Section) -> Module

rules

 	editor-analyze:
    (ast, path, project-path) -> (<flatten-list>[error-sdf*, error-str*], warning-sdf*, notes-sdf*)
    where debug(!"1. spoofax-lang> inside editor-analysis >> ")
    with
      editor-init;
      ast' := <analyze-ast> (ast, path, project-path) ;
     	debug(!"3. spoofax-lang> Analysis is done. ");
     	(error-sdf* , warning-sdf*, notes-sdf*):= <editor-analyze-sdf>(ast' , path, project-path);
     	//(error-str* , warning-str*, notes-str*):= ([], [], []);
     	(error-str* , warning-str*, notes-str*):= <editor-analyze-str>(ast' , path, project-path);
     	<debug(!"SDF Errors: ")>error-sdf*;
     	<debug(!"Str Errors: ")>error-str*;
     	<debug(!"Errors: ")><flatten-list>[error-sdf*, error-str*]  
 
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <propose-completion <+ ![]> node
 
  editor-resolve:
    (sort(x), position, ast, path, project-path) -> target
    where
      target := <Declaration> x
 
  editor-resolve:
    (unparameterized(x), position, ast, path, project-path) -> target
    where
      target := <parse-spoofaxlang-file> <resolve-import> x

  override pp-sdf-string = fail // ensure compiler doesn't blow up
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term

  generate-sdf:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"sdf")> path;
      result   := <pp-sdf-string'> <to-sdf> (path, selected)

  pp-sdf-string' =
    sdf-desugar;
    parenthesize-Sdf2;
  	sdf-ppfix;
    ast2box(|[<pp-table-sdf>]);
    box2text-string(|80)

  generate-str:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"str")> path;
      result   := <pp-stratego-string> <parenthesize-Stratego> <to-str> (path, selected)

  generate-esv:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|".packed.esv")> path;
      result   := <to-esv> (path, selected)
  
  
  find-spoofax-module-name:
    (path, def) -> name
    with
      Module(name, _) := def
    <+
      name := <remove-extension> <base-filename> path
