module spoofaxlang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  libstratego-sdf
  libstrc
imports
  include/SpoofaxLang
  lib/editor-common.generated
imports
  codegen/str/to-stratego
imports
  analyze/sdf/check
  context/sdf/declare
  context/str/declare
imports
  codegen/buildscripts
	codegen/compile
	codegen/esv/to-esv
	codegen/sdf/to-sdf
	codegen/sdf/to-name-analysis
  codegen/sdf/to-signature
  codegen/main
  
imports
	normalize/main
	normalize/signatures
imports
	context/-
imports
	utils/cache
	common
  config
	unit-tests/-
	unit-tests/templatelang/-
	unit-tests/utils/-
imports
	 editor/main
	 codegen/main

rules

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <propose-completion <+ ![]> node

  editor-resolve:
    (sort(x), position, ast, path, project-path) -> target
    where
      target := <Declaration> x

 /*  TODO : Fix Editor Resolve
  editor-resolve:
    (unparameterized(x), position, ast, path, project-path) -> target
    where
      target := <parse-spoofaxlang-file> <resolve-import> x
 */

rules

  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := ast // we just return the input term

  run-templatelang-tests:
    (selected, position, ast, path, project-path) -> None()
    with
      test-templatelang-to-sdf;
      test-templatelang-to-esv;
      test-templatelang-to-stratego;
      test-templatelang-desugar;
      test-sdf2conflicts
