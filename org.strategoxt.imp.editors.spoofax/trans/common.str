module common

imports 
  libstratego-lib
  libstratego-sdf
  libstratego-sglr
  libstratego-gpp
  libstratego-aterm
  libstrc
  lib/editor-common.generated
  lib/sdf-desugar
  lib/sdf-parenthesize
imports 
	include/SpoofaxLang
	
strategies 
	pp-aterm = pp-aterm-box ; box2text-string(|100)
	

strategies 
	
	enable-stratego-debugging  = rules(DebugStr: x -> x)
	
	disable-stratego-debugging = rules(DebugStr:- _ )
	
	debug-str = not(DebugStr) <+ debug
  
strategies 

	// Dubug switches  
	enable-sdf-debugging  = rules(DebugSDF: x -> x)
	
	disable-sdf-debugging = rules(DebugSDF:- _ )
	
	debug-sdf = not(DebugSDF) <+ debug
 
 
 rules
 	
 	/**
 	* Creates a namespace reference table. It stores following in the reference table . 
 	* key : (package-name , concept-name) | value : def
 	*
 	*	@type a -> a 
 	*/
 	store-definition(|resolved-path): 
			def@definition -> def
			with
				(package-name, package-gen-relative-path)  := 	<find-spoofax-module-name-string>(resolved-path, def)
				;concept-name := <base-filename>package-name //TODO : get concept-name 
			with 
				if not(<is-declared>(package-name, concept-name)) then 
					rules
					( 
							DeclaredConcept :+ (package-name, concept-name ) -> def
							FilePath-of-DeclaredConcept:+ (package-name, concept-name ) -> resolved-path //TODO: not sure yet whether we need it.
							Package-Gen-Root-of-DeclaredConcept:+(package-name, concept-name )  -> package-gen-relative-path
					) 
					;<debug>$[SymbolTable|Storing following declaration - DeclaredConcept : ([package-name],[concept-name]) -> [<pp-aterm>def]]
				else
					<debug>$[ SymbolTable|Already exists in the namespace table : ([package-name],[concept-name])]	
				end 
	
	is-declared = get-declarations ; ?[_|_]
	
	get-declarations = ?(namespace, conceptname);bagof-DeclaredConcept
	
	get-unique-declaration = get-declarations; ?[<id>]
	  
	get-declarations-by-namespace= ?namespace ; get-all-declared-entries ; filter(?(namespace, _)); mapconcat(bagof-DeclaredConcept)
	
	get-all-declared-entries = all-keys-DeclaredConcept ; filter(?(_,_))
	
	get-all-declared-entries-by-namespace = ?namespace ; all-keys-DeclaredConcept ; filter(?(namespace,_))
	
	get-all-declared-concept = get-all-declared-entries ; filter(?(namespace, _)); mapconcat(bagof-DeclaredConcept)
	
	map-declarations( declaration-adapter): 
		list* -> result
		where 
			result :=<map(project-declaration(declaration-adapter))>list*
		
				
				
	project-declaration(declaration-adapter):
		n@(namespace, conceptname) -> result
 		where 
		 	concept := <get-unique-declaration> n
		  ;result := <declaration-adapter>(namespace,conceptname , concept)  
		
	project-allkeys-declared(adapter): 
		list* -> result
		where 
			result :=<map(project-key-declared(adapter))>list*
	
	project-key-declared (key-adapter):
		n@(namespace, conceptname) -> result
 		where 
		  result := <key-adapter>(namespace,conceptname)  
	
rules 
	
	find-spoofax-module-name:
    (path, def) -> name
   	 with
   	 		Module(name, _) := def
   	 	<+
   	 		if not(!path => "") then
      		name := <remove-extension> <base-filename> path
    		end
  
  
  //TODO : improve its performance by adding caching  		
 	find-spoofax-module-name-string: 
		(path,def) ->(package-name, relative-autogen-path)
	  with
				name := <find-spoofax-module-name> (path,def)
	      ;if !name => ParamName(n, p) then
	      	name' := parameterized(n, p)
      	else
   				(Name(name') := name) 
	      	<+ 
     			(name' := name) 
  	    end
  	  	;modname-part* := <string-tokenize> (['/'], name')
  	 		;if <eq>(<length>modname-part* , 1) then
  	 		 		package-name  := name'
  	 		 		;relative-autogen-path := ""
  	 		 else
  	 		 	 package-name   := <last>modname-part*
  	 		 	;relative-autogen-path := <dirname>name'  
  	 		 end
		  	 
	
  get-qualified-spxmodulename: 
  	(namespace-name,concept-name) -> result
	where
		result := namespace-name//TODO : when there is a concept-name added in spx , result will be package-name/conceptname 
   		    
  
  //TODO : remove followind temp fix  
  get-qualified-spxmodulename1: 
  	(namespace-name,concept-name) -> result
	where
		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(namespace-name,concept-name)
		;if <eq>("", autogen-dir) then 
		 		result := namespace-name 
		else
			result := $[[autogen-dir]/[namespace-name]]//TODO : when there is a concept-name added in spx , result will be package-name/conceptname
		end 
  
  
  get-fullyqualified-autogen-path(|extension): 
  	(project-path, base-dir,spx-modulename) -> $[[project-path]/[base-dir]/[spx-modulename].[extension]]  
  
  save-to-file:(fileName, fileContent) -> None()  
      where
          not(<eq>("", fileContent))
      with  
      		<debug> $[Writing to the following file : [fileName]the following content: [fileContent] ]
      		//;<debug> $[Writing the following content: [<pp-aterm>fileContent] to the following file: [fileName]]
          ;handle := <fopen> (fileName, "w+")
          ;<fputs>(fileContent , handle)
          ;fclose
    rules
	
	ensure-directory-exists = ?dirpath ; (file-exists ; filemode ; isdir) <+ mkdir	
    		    	
rules
	
	initialize-configuration  = rules (Autogenerated-Artifacts-Dir := ".shawdowdir")
															;<debug> $[Spoofax-lang|Initialize-Configuration]
rules
	
	ensure-exists =  
		?(project-path,relative-path)
		;dir* := <string-tokenize> (['/'], relative-path) //tokenize relative-path to create the subdirectories
		;if not(<eq>(<length>dir*,0)) then 
				<map(create-folder)> dir*  //Creating sub-directories if they does not exists
		 end
		;create-folder(|project-path)  // restoring current folder to the project-path 
		 
		
	create-folder(|directory-to-create) =   <file-exists<+mkdir(|"w")> directory-to-create;<chdir>directory-to-create  
	
  create-folder: folder-name -> None() 
		with 
    	<file-exists<+mkdir(|"w")> folder-name 
      ;<chdir>folder-name 		    
 	
 	 					 