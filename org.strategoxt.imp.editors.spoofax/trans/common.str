module common

imports 
	libstratego-lib
  libstratego-sdf
  libstratego-sglr
  libstratego-gpp
  libstratego-aterm
  libstrc
  lib/editor-common.generated
  lib/sdf-desugar
  lib/sdf-parenthesize
imports 
	include/SpoofaxLang
	
strategies 
	pp-aterm = pp-aterm-box ; box2text-string(|100)
	
  pp-sdf-string' =
    sdf-desugar; 
    parenthesize-Sdf2; 
  	sdf-ppfix; 
    ast2box(|[<pp-table-sdf>]); 
    box2text-string(|80)
  
strategies // Dubug switches  
	enable-sdf-debugging  = rules(DebugSDF: x -> x)
	disable-sdf-debugging = rules(DebugSDF:- _ )
	debug-sdf = not(DebugSDF) <+ debug
 
 
 rules
 		store-declaration(|resolved-path): 
			def@definition -> def
			with
				package-name := 	<find-spoofax-module-name-str>(resolved-path, def)
				;concept-name := "concept-name" //TODO : get concept-name 
			with 
				rules
					( 
							DeclaredConcept :+ (package-name, concept-name ) -> def
							FilePath-of-DeclaredConcept:+ (package-name, concept-name ) -> resolved-path //TODO: not sure yet whether we need it.
					) 
			where
				<debug>$[ Storing following declaration - DeclaredConcept : ([package-name],[concept-name])]
		 
rules 
	find-spoofax-module-name:
    (path, def) -> name
   	 with
   	 		Module(name, _) := def
   	 	<+
   	 		if not(!path => "") then
      		name := <remove-extension> <base-filename> path
    		end
 	find-spoofax-module-name-str: 
		  (path,def) ->name'
			with
				name := <find-spoofax-module-name> (path,def)
      	;if !name => ParamName(n, p) then
        	name' := parameterized(n, p)
      	else
       			(Name(name') := name) 
       		<+ 
       			(name' := name) 
  	    end
  	    
rules 
	get-declarations = ?(namespace, conceptname) ; bagof-DeclaredConcept
	is-declared = get-declarations ; ?[_|_]
	get-declarations-by-namespace= ?namespace ; all-keys-DeclaredConcept ; filter(?(namespace, _)); mapconcat(bagof-DeclaredConcept)
	get-all-declared-entries = all-keys-DeclaredConcept 
	
					 