module common

imports 
	libstratego-lib
  libstratego-sdf
  libstratego-sglr
  libstratego-gpp
  libstratego-aterm
  libstrc
  lib/editor-common.generated
  lib/sdf-desugar
  lib/sdf-parenthesize
imports 
	include/SpoofaxLang
	
strategies 
	pp-aterm = pp-aterm-box ; box2text-string(|100)
	
  
strategies 
	
	// Dubug switches  
	enable-sdf-debugging  = rules(DebugSDF: x -> x)
	
	disable-sdf-debugging = rules(DebugSDF:- _ )
	
	debug-sdf = not(DebugSDF) <+ debug
 
 
 rules
 	
 	/**
 	* Creates a namespace reference table. It stores following in the reference table . 
 	* key : (package-name , concept-name) | value : def
 	*
 	*	@type a -> a 
 	*/
 	store-definition(|resolved-path): 
			def@definition -> def
			with
				package-name := 	<find-spoofax-module-name-string>(resolved-path, def)
				;concept-name := <base-filename>package-name //TODO : get concept-name 
			with 
				if not(<is-declared>(package-name, concept-name)) then 
					rules
					( 
							DeclaredConcept :+ (package-name, concept-name ) -> def
							FilePath-of-DeclaredConcept:+ (package-name, concept-name ) -> resolved-path //TODO: not sure yet whether we need it.
					) 
					;<debug>$[ Storing following declaration - DeclaredConcept : ([package-name],[concept-name]) -> [<pp-aterm>def]]
				else
					<debug>$[ Already exists in the namespace table : ([package-name],[concept-name])]	
				end 
	
	is-declared = get-declarations ; ?[_|_]
	
	get-declarations = ?(namespace, conceptname);bagof-DeclaredConcept
	
	get-unique-declaration = get-declarations; ?[<id>]
	  
	get-declarations-by-namespace= ?namespace ; get-all-declared-entries ; filter(?(namespace, _)); mapconcat(bagof-DeclaredConcept)
	
	get-all-declared-entries = all-keys-DeclaredConcept ; filter(?(_,_))
	
	get-all-declared-concept = get-all-declared-entries ; filter(?(namespace, _)); mapconcat(bagof-DeclaredConcept)
	
	map-declarations( declaration-adapter): 
		list* -> result
		where 
			result :=<map(project-declaration(declaration-adapter))>list*
		where 
			<debug>$[projecting declarations : : [<pp-aterm>result]]
			 
	project-declaration(declaration-adapter):
		n@(namespace, conceptname) -> result
 		where 
		 	concept := <get-unique-declaration> n
		  ;result := <declaration-adapter>(namespace,conceptname , concept)  
		where
				<debug>$[projecting declaration : [<pp-aterm>result]]
		
			 
rules 
	
	find-spoofax-module-name:
    (path, def) -> name
   	 with
   	 		Module(name, _) := def
   	 	<+
   	 		if not(!path => "") then
      		name := <remove-extension> <base-filename> path
    		end
    		
 	find-spoofax-module-name-string: 
		  (path,def) ->name'
			with
				name := <find-spoofax-module-name> (path,def)
      	;if !name => ParamName(n, p) then
        	name' := parameterized(n, p)
      	else
       			(Name(name') := name) 
       		<+ 
       			(name' := name) 
  	    end
  	    	
rules
	
	initialize-configuration  = rules ( 
																			Autogenerated-Artifacts-Directory : ".showdowdir"
																		)					 