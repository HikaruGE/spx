module str/to-stratego
imports 
	libstrc
imports
  libstratego-lib
	lib/editor-common.generated
imports
  include/SpoofaxLang

imports 
	common
	sdf/to-signature
		
rules

  to-str:
    (path, def) -> Module(name, str-section)
    with
      name := <find-spoofax-module-name-string>(path, def)
      ;sections  := <collect-om(?STRSection(<id>), conc)> def
    with 
    	import-stmt* := <make-set> <import-signatures> <collect-om(?Imports(<id>) , conc);flatten-list> def
      ;str-import-stmt* := [Imports(<map(spximport-to-strimport)>import-stmt* )]
   	with 
   		str-section := <conc> (str-import-stmt* , sections) 

rules

	to-str-all: 
		(def, path , project-path)-> None()
 		with 
 			declared-concept-entries := <get-all-declared-entries>
 			;name := <find-spoofax-module-name-string>(path, def)
 		where
 			<map-declarations(to-str(|project-path))>declared-concept-entries
			;generate-str-main(|project-path , name)
 	
 	to-str(|project-path):
		(package-name,concept-name,def) -> str-string
		with 
			autogen-directory := <Autogenerated-Artifacts-Dir>
		with 
    	name := <get-qualified-spxmodulename>(package-name,concept-name)
    	;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-directory , name)
    	;output-path-rtree := <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-directory , name)
    	;<debug>output-path-str  
    	;<debug>output-path-rtree  
    where
    	if signature-file-name then 
    		import-stmt* := <make-set> <import-signatures> <collect-om(?Imports(<id>) , conc);flatten-list> def
  		else
  			import-stmt* := <make-set> <collect-om(?Imports(<id>) , conc);flatten-list> def
			end   
      ;str-import-stmt* := [Imports(<map(spximport-to-strimport)>import-stmt* )]
   		;sections  := <collect-om(?STRSection(<id>), conc)> def
   		;str-section := <conc>(str-import-stmt* , sections) 
    where 
    	str-aterm := Module(name, str-section);
 			str-string := <pp-stratego-string> <parenthesize-Stratego> str-aterm
 		where 
			<dirname; ensure-directory-exists>output-path-str 
			;<save-to-file>(output-path-str , str-string)
		where 
			<dirname; ensure-directory-exists>output-path-rtree 
			//;<save-to-file>(output-path-rtree , <pp-aterm>str-aterm)
			;<WriteToBinaryFile>(output-path-rtree , str-aterm)
	 
	generate-str-main(|project-path , main-package-name)=
		  declared-concept-entries := <get-all-declared-entries>
		  ;main-package-name' := $[[main-package-name]-main]
		  ;str-aterm := Module( main-package-name' , [Imports(<project-allkeys-declared(to-str-import)>declared-concept-entries)])
		  ;str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm 
			
			;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,<Autogenerated-Artifacts-Dir> , main-package-name')
			;<dirname; ensure-directory-exists>output-path-str
			;<save-to-file>(output-path-str , str-string )
			 
			;output-path-rtree := <get-fullyqualified-autogen-path(|"rtree")>(project-path,<Autogenerated-Artifacts-Dir> , main-package-name')
			;<dirname; ensure-directory-exists>output-path-rtree
			;<WriteToBinaryFile> (output-path-rtree , str-aterm)
			//;<save-to-file>(output-path-rtree , <pp-aterm>str-aterm) 
			  								  
rules 
	
	//TODO : Still need to handle parameterized Imports
	
	/**
	* Converts import statements of SPX to import statements of Stratego
	*/
	spximport-to-strimport :  
			Import(Name( package-name) ) -> Import(package-name)
	
	/**
	* Converts ( package-name , concept-name) to stratego import
	* 
	* @type ( package-name, concept-name) -> Import(name) 
	*/		
	to-str-import:(p-name , c-name) -> Import(result) 
		where 
				result := $[[<get-qualified-spxmodulename>(p-name,c-name)]
									 ]

	import-signatures : import* -> <conc>([Import(Name(<signature-file-name>))] , import*)
		where debug 
		where <debug><signature-file-name>
		