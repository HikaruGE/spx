module str/to-stratego

imports
  libstratego-lib
	lib/editor-common.generated
imports
  include/SpoofaxLang
imports 
	common
	
rules

  to-str:
    (path, def) -> Module(name, sections)
    with
      name := <find-spoofax-module-name-string>(path, def)
      ;sections  := <collect-om(?STRSection(<id>), conc)> def
      ;debug(!"sections : ")
      ;import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> def
      ;str-import-stmt* := Imports( <map(spximport-to-strimport)>import-stmt* )
      
	
rules
	to-str-all: (def, path , project-path)  -> None()
 		with 
 			declared-concept-entries := <get-all-declared-entries>
 			; name := <find-spoofax-module-name-string>(path, def)
 		where 
 			<debug>$[Namespace-reference-table : [<pp-aterm>declared-concept-entries]]
 		where
 			<map-declarations(to-str(|project-path))>declared-concept-entries
			;generate-str-main(|project-path , name)
 	
 	generate-str-main(|project-path , main-package-name)=
		  declared-concept-entries := <get-all-declared-entries>
		  ;main-package-name' := $[[main-package-name]-main]
		  ;sdf-string := 
$[module [main-package-name']
imports
	[<project-allkeys-declared(to-str-import)>declared-concept-entries]   									 
]
			;output-path := <get-fullyqualified-autogen-path(|"sdf")>(project-path,<Autogenerated-Artifacts-Dir> , main-package-name')
			;<dirname; ensure-directory-exists>output-path 
			;<save-to-file>(output-path , sdf-string )
		   								  
	
	to-str-import:(p-name , c-name) -> result 
		where 
				result := $[[<get-qualified-spxmodulename>(p-name,c-name)]
									 ]
						    
 	to-str(|project-path):
		(package-name,concept-name,def) -> str-string
		with 
			autogen-directory := <Autogenerated-Artifacts-Dir>
		with 
    	
    	name := <get-qualified-spxmodulename>(package-name,concept-name)
    	;output-path := <get-fullyqualified-autogen-path(|"sdf")>(project-path,autogen-directory , name)
    	;<debug>output-path  
    with
    	import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> def
      ;str-import-stmt* := Imports( <map(spximport-to-strimport)>import-stmt* )
      ;sections  := <conc>[str-import-stmt* , <collect-om(?STRSection(<id>), conc)> def]
    where 
 			//str-string := <pp-sdf-string'> 'module(name, [sdf-import-stmt*], [exports(sections')])
 			str-string := ""
 		where 
			<dirname; ensure-directory-exists>output-path 
			;<save-to-file>(output-path , str-string )
	
rules 
	
	/**
	* Converts import statements of SPX to import statements of Stratego
	*/
	spximport-to-strimport :  
			Import(Name( package-name) ) -> Import(package-name)
			
	