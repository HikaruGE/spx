module config 

imports 
	libstratego-lib
  libstratego-sglr
  libstratego-gpp
imports 
	common
	spoofaxlang
imports 	
	utils/debug
	lib/Configuration/SpoofaxConfiguration
	lib/editor-common.generated
imports 	
	normalize/signatures
	context/signatures
	include/SpoofaxLang
	
	
rules 
	default_package_name = !"__default"
	
	default_src_directory = !"src"
	
	root_directory = !"."
	
	default_output_directory= !".shadowdir"
	
	internal_module_name_string = !"__internal"
	
	get-known-legacy-extensions = !["sdf" , "def" , "str" , "rtree"] 
		
rules 
	
	fallback-configuration = 
		!Configuration(
		  [ Includes([Sources(AllDirectories(), [<root_directory>])])
		  , CodeGeneration([OutputDirectory(<default_output_directory>)])
		  ]
		)	
	
	initialize-configuration = 
		?current-term 
		;<parse-spoofaxconfiguration-file<+<debug>$[Failed to Load Configuration... Loading Default Configuration.]; fallback-configuration>"spx.config" => config-aterms
		;init-output-directory
		;init-source-directory    		
		;<init-ignored-directories>[".svn"]
		;enable-caching
		;enable-lib-cache-invalidation
		;enable-pretty-printing
		;enable-command-line-mode  
		;disable-command-line-mode       
		;disable-caching
		;disable-pretty-printing 
		    
		;!current-term

	show-configuration: (selected, position, ast, path, project-path) -> (filename, result)
	with 
		editor-init;
		initialize-configuration 		
	where 
		if Enable-Caching then 
			enabled-caching-string := "Caching of Semantic Errors is Enabled"  
		else
			enabled-caching-string := "Caching of Semantic Errors is Disabled"
		end
	where
		filename := <guarantee-extension(|"config.resolved")> path;
		result := $[ Spoofax-lang|Configuration  - [project-path]/spx.config
	
		Resolved Source Directories:  
			[<pp-aterm><bagof-SPX-Source-Dir>]
		
		Ignored Subdirectories : 
			[<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]
		
		Output Directory : [<pp-aterm><Autogenerated-Artifacts-Dir>]
		
		[enabled-caching-string] 
				
		]
					
	show-configuration : ()-> result
	where 
		if Enable-Caching then 
			enabled-caching-string := "Caching of Semantic Errors is Enabled"  
		else
			enabled-caching-string := "Caching of Semantic Errors is Disabled"
		end
	where
		result := $[ Spoofax-lang|Configuration  - [<getcwd>]/spx.config
	
		Resolved Source Directories:  
			[<pp-aterm><bagof-SPX-Source-Dir>]
		
		Ignored Subdirectories : 
			[<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]
		
		Output Directory : [<pp-aterm><Autogenerated-Artifacts-Dir>]
		
		[enabled-caching-string] 
				
		] 
rules		
	// enables library cache invalidation 
	enable-lib-cache-invalidation = with( rules(invalidate-lib-cache: _ ) )
	
	disable-lib-cache-invalidation = with( rules(invalidate-lib-cache:- _ ) )
rules	
	//enable command line mode
	enable-command-line-mode =  with (rules(Enable-CommandLine-Mode : _ ))
	
	disable-command-line-mode = with(rules(Enable-CommandLine-Mode:- _ ))
	
	is-in-command-line-mode = where ( Enable-CommandLine-Mode )
	
rules	
	//enable caching 
	enable-caching =  with (rules(Enable-Caching : _ ))
	
	disable-caching = with(rules(Enable-Caching :- _ ))
	
rules	
	// enable pp-aterm
	enable-pretty-printing = with (rules(disable-pp-aterm : _ ))
	 
	disable-pretty-printing = with (rules(disable-pp-aterm :- _ ))
		
rules	
	init-ignored-directories : [] -> [] 
	
	init-ignored-directories: [current-dir | rest] ->[current-dir | <init-ignored-directories>rest]    
		where
			not(?[])
		where
			rules(Ignored-Spx-Souce-Dir :+ current-dir -> current-dir) 	
	
	
	init-output-directory : config-aterm -> config-aterm 
	where
  	 get-code-output-directory; setup-autogen-root-directory  			
	
	
	//intializes the source directories . Compiler will only consider this directory as a valid spx sources .
	init-source-directory : config-aterm -> config-aterm 
	where 
		get-all-includes ; 
		setup-source-directories			


	override-configured-source-directories : localsoucedir -> localsoucedir
	where
		remove-existing-configuration-sourcedirs;
		<setup-source-directories>[(localsoucedir,AllDirectories())]
	
	remove-existing-configuration-sourcedirs= with( rules(	SPX-Source-Dir :- _)) // removing all the configured source directory 


rules
	setup-autogen-root-directory = 
		?codegen-output-dir;
		with(
				rules(
					Autogenerated-Artifacts-Dir := codegen-output-dir
				)
		) 

	setup-source-directories: [] -> []	 
	setup-source-directories: [configured-directory-setting|rest*] -> [configured-directory-setting|<setup-source-directories>rest*]  
	where 
		not(?[])
	where 
		rules(
			SPX-Source-Dir :+ _ -> configured-directory-setting
		)
				  			 	
		
rules  
	
	parse-spoofaxconfiguration-file =
    parse-file(
      strsglr-perror, strsglr-report-parse-error
    | <import-term(lib/Configuration/SpoofaxConfiguration.tbl)>
    )
	
	//Returns output directory for the code generation
	get-code-output-directory = collect-one(?OutputDirectory(<id>))

	// Returns all the resolved directories 	
	get-all-includes  = 
 	<conc>(<get-all-sources(|<get-project-path>)> ,   <get-sources-from-external-projects>)
 	;make-set
 
 
	convert-abs-path(|project-path) : (s, o) -> (s' , o)
	where
		 if !s => <root_directory>  then 
		 		s' := $[[project-path]] 
		 else 
		 		s' := $[[project-path]/[s]]
		 end
		 	
	get-all-sources(|project-path) =
 		collect-all(?Sources(_, _));
 		get-local-sources;
 		map(convert-abs-path(|project-path))
 	<+ 
  		debug(!"Failed to get list of source directory.") ; fail
 
	get-local-sources: [] -> []
 
	get-local-sources: 
 	[Sources(include-option,sources*)|rest] -> result
 	where
 		<map(\s -> (s,include-option)\)>sources* => result';
 		<conc>(<get-local-sources>rest, result') => result	 	
 
 
rules 
 	
 	// Resolving project References 
	get-sources-from-external-projects = 
  	get-all-project-refernces; 
  	get-external-sources

	// Returns all the external sournce collected from the project references 
 	get-external-sources: spx-projects* -> result
	where 
		not (?[])
	  ;!spx-projects* => [current-project-path|rest*]
	 where
	 	result := <conc>( <resolve-external-sources<+ ![]>current-project-path , <get-external-sources>rest* )
	 	
	get-external-sources: []  -> []
	 
	 
	// Resolves External Project Refernces and returns the directories configured in that configuration file
	// Transitive imports/inclusion is not allowed. If a->b , b->c != a->c
	resolve-external-sources =
		where(explode-string; <not(eq)>(<Hd> , 46)) ; // not started wtih  ..
	  	?current-project-path;
	  	verify-directory-exists;
	  	verify-config-file-exists;   
	  	<parse-file>$[[current-project-path]/spx.config];
	  	get-all-sources(|current-project-path)
	
	  	
	resolve-external-sources =
		where(explode-string; <eq>(<Hd> , 46)) ;
		where(current-dir := <getcwd>);
		(
	  		?current-project-path;
	  		<verify-directory-exists>current-project-path;
	  		<chdir> current-project-path;
	  		<verify-config-file-exists><getcwd>; // verifies config file exisit in the current working directory
	  		<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
	  		<chdir>current-dir; 
	  		!result
	  	<+
	  		<chdir>current-dir  
		)
	
	get-all-project-refernces = 
  	collect-all(?SpxProjects(<id>), conc) ; 
  	flatten-list
  <+ 
  	debug(!"Failed to retrieve list of projects.") ; fail 
		
rules 

	// Utility strategies  

	
	// verifies whether current directory exists 
	verify-directory-exists  = is-dir-exist   <+ throw-directory-not-found-exception(fail) 
	
	// verfies whether there is a config file in the provided directory 
	verify-config-file-exists = is-spx-config-exist   <+ throw-config-not-found-exception(fail)   
	
	is-spx-config-exist = where(<file-exists>$[[<id>]/spx.config])  
	
	is-dir-exist =  where(file-exists ; filemode ; isdir)

	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
	
	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy
	   	 		 		
