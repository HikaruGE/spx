module templatelang-to-esv

language SpoofaxLang
target language EditorService

setup no newlines [[
  package example
  module example
  templates
]]

// FIXME: Test with other newlines setting.
//        There is no way to automatically run the tests with all three
//        settings without repeating all tests, unfortunately.

// setup leading newlines [[
//   module example
//   template options
//     newlines : leading
//   templates
// ]]

// setup trailing newlines [[
//   module example
//   template options
//     newlines : trailing
//   templates
// ]]

target setup [[
  module example
  completions
]]

test empty [[
  X.Y = <<>>
]]
run test-templatelang-to-esv to [[

]]

test placeholder [[
  X.Y = <<
    foo
    <Z>
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: "foo\n" <Z:Z> (blank)
]]

test placeholder (text) [[
  X.Y = <<
    foo
    < display text : Z>
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: "foo\n" < display text :Z> (blank)
]]

test placeholder (option) [[
  X.Y = <<
    foo
    <Z?>
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: "foo\n" (cursor) (blank)
]]

test placeholder (plus) [[
  X.Y = <<
    foo
    <Z+>
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: "foo\n" <Z:Z> (blank)
]]

test placeholder (star) [[
  X.Y = <<
    foo
    <Z*>
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: "foo\n" (cursor) (blank)
]]

test placeholder and literals [[
  X.Y = <<
    foo
    <Z>
    bar
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: "foo\n" <Z:Z> "\nbar" (blank)
]]

test placeholder (option) and literals [[
  X.Y = <<
    foo
    <Z?>
    bar
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: "foo\n" (cursor) "\nbar" (blank)
]]

test n placeholders => one (cursor)-directive (1) [[
  X.Y = <<
    <A?>
    <B?>
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: (cursor) (blank)
]]

test n placeholders => one (cursor)-directive (2) [[
  X.Y = <<
    <A?>
    <B?>
    <C?>
  >>
]]
run test-templatelang-to-esv to [[
  completion template X: (cursor) (blank)
]]

test if then statement [[
  Statement.IfThen = <<
    <MetaAnno*; separator="\n">
    if <Exp> then
      <Statement*; separator="\n">
    end
  >>
]]
run test-templatelang-to-esv to [[
  completion template Statement:
    "if " <Exp:Exp> " then\n\t" (cursor) "\nend" (blank)
]]
