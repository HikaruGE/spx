module templatelang-to-str-1

language SpoofaxLang
target language Stratego-Sugar

// FIXME: This testsuite should really eval the generated stratego code on sample
//        input, instead of testing the exact form of the generated stratego code.
//        This is currently not really possible, however ...

setup [[
  package example
  module example
  templates
]]

target setup header [[
  module prettyprinter
  imports
    libstratego-lib
  strategies
    pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
    pp-list(s|t) = map(s); separate-by(|t); concat-strings
    pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
    pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
  strategies
    prettyprint-X: Y(a) -> a'
      // The strategies invoked here differ per test
      // The footer contains a last, common line.
]]

test placeholder [[ X.Y = <<<Z>>> ]]
run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]

test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]
run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]

test placeholder (plus) [[ X.Y = <<<Z+>>> ]]
run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" ")> a ]]

test placeholder (star) [[ X.Y = <<<Z*>>> ]]
run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" ")> a ]]

test placeholder (plus, separator) [[ X.Y = <<<Z+; separator=", ">>> ]]
run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|", ")> a ]]

test placeholder (star, separator) [[ X.Y = <<<Z*; separator=" + ">>> ]]
run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" + ")> a ]]

test escaped chars in separator [[ X.Y = <<<Z*; separator="\"\t">>> ]]
run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|"\"\t")> a ]]

target setup footer [[
  strategies
    prettyprint-Z = is-string
]]
