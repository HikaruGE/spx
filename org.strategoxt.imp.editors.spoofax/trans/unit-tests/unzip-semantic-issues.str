module 
	unit-tests/unzip-semantic-issues

imports
  libstratego-lib

rules
	
	test-unzip-semantic-issues: 
		(selected, position, ast, path, project-path) -> None()
		where
			![[],(["a1"] , ["b1"] , ["c1"]),
				    (["a2"] , ["b2"] , ["c2"]),
				    (["a3"] , ["b3"] , ["c3"])
			 ];
			 result := <test-unzip-semantic-issuse-main(|[] , [], [])> <id>;
			 <debug(!"result : ")>result
			where
			![([],[],[]),
				([],[],[])
			 ];
			 result1 := <test-unzip-semantic-issuse-main(|[] , [], [])> <id>;
			 <debug(!"result2 : ")>result1
			 	 
			  
	
	/* Testing Unzip . It converts
	* [([a1] , [b1] , [c1])
	*  ([a2] , [b2] , [c2])
	*  ([a3] , [b3] , [c3])
	* ] 
	* to ([a1,a2,a3] , [b1,b2,b3] , [c1,c2,c3])
	* store following mapping then module-name  -> issues
	* 
	*/
	test-unzip-semantic-issuse-main(|errors, warnings, infos) =
		where (debug(!" Currently working :"));
		?[hd-issue|rest-issues];
		(
				!hd-issue => (errs', warns' , infos')
				;err1 := <concat>[errs', errors]
				;war1 := <concat>[warns', warnings]
				;inf1 := <concat>[infos', infos]
				;<test-unzip-semantic-issuse-main(|err1, war1, inf1)>rest-issues
			 <+
			  !hd-issue => [];
			  <test-unzip-semantic-issuse-main(|errors, warnings, infos)>rest-issues
		)
			
		
		
	test-unzip-semantic-issuse-main(|errors, warning, infos) : [] -> (errors, warning, infos)	

			
			
			
						
	