module context/declare

imports
	context/sdf/declare
	context/sdf/declare-signature
	context/str/declare
	context/template/declare
	context/-
	normalize/signatures
imports
	include/SpoofaxLang
	lib/editor-common.generated
imports
	utils/annotations
	utils/debug
	utils/contract
	config
	common

rules
	declare-package =
		contracts(
			contract-requires(
				?Package(QName(_))
			)
		);
		get-enclosed-modules;
		map(get-module-declaration);
		list-loop(declare-module(declare-global-symbol))

	declare-module(s) = origin-track-forced(s)

	declare-all = declare-spxmodules-all(declare-section); update-modified-module-declaration

	declare-global-symbol = declare-global ;  update-modified-module-declaration

	init-declaration = init-record-signatures ; init-template-options


rules

	declare-legacy-artifact(|resolved-path) : legacy-content -> legacy-content
	where
		<has-extension(|"sdf") + has-extension(|"def")>resolved-path;
		<alltd(declare-sdf-definition-main)>legacy-content

	declare-legacy-artifact(|resolved-path) : legacy-content -> legacy-content
	where
		<has-extension(|"str") + has-extension(|"rtree")>resolved-path;
		<alltd(declare-str-definition-main)>legacy-content

rules

	declare-global = declare-spxmodules-all(declare-global-section)


rules

	declare-spxmodules-all(s):
		Module(attrb* , modname , section*) -> Module(attrb* , modname , m-sections*)
		where
			<alltd(s)>section* => m-sections*

	update-modified-module-declaration:
		m@Module(attrb* , modname , section*) -> m
		with
				Package( package-qname) := <get-annotation(get-package-annotation)>modname
		with
			<store-declaration(|Modules())>(<get-module-untyped-qname>(package-qname, modname),  m)

rules
	declare-section:
		SDFSection(definition*) ->SDFSection(declared-definition*)
		where
			declared-definition* := <declare-sdf-definition-main>definition*

	declare-section:
		SDFSectionEH(_,definition*) -><declare-section>SDFSection(definition*)

	declare-section:
	  STRSection(def*) -> STRSection(m-definition*)
    where
      m-definition* := <declare-str-definition-main>def*

  declare-section: ESVSection(def*) -> <id>

  // TemplateLang
  declare-section:
    TemplateSection(definition*) -> TemplateSection(declared-definition*)
    with
      declared-definition* := <declare-template-definition-main> definition*

  // TemplateLang
  // FIXME: move to spoofax.configuration?
  declare-section:
  	TemplateOptions(option*) -> TemplateOptions(declared-option*)
  	with
  	  declared-option* := <declare-template-options-main> option*

rules

	declare-global-section: SDFSection(def*) -> <id>

	declare-global-section: SDFSectionEH(_,def*) -> <id>

	declare-global-section: s@STRSection(def*) -> STRSection(m-definition*)
	where
		m-definition* := <declare-stratego-globals-top>def*

  // TemplateLang
  declare-global-section: TemplateSection(def*) -> <id>

  // TemplateLang
  declare-global-section: TemplateOptions(opt*) -> <id>

rules

	// Declaring current scope for further analyze
	declare-current-scope(| package-typed-qname , module-typed-qname)=
		with(
			<declare-current-package-scope>package-typed-qname;
			<declare-current-module-scope>module-typed-qname
		)

	declare-current-package-scope :
		package-typed-qname -> <id>
		with
			rules ( GetEnclosingPackageName      := package-typed-qname)

	declare-current-module-scope:
			module-typed-qname -> <id>
			with
				rules ( GetEnclosingModuleName      := module-typed-qname)
