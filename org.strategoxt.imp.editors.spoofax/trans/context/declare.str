module context/declare

imports
  include/libtemplatelang
imports
	context/sdf/declare
	context/str/-
	context/esv/declare
	context/sdf/declare-signature
	context/-
	normalize/signatures
imports
	include/SpoofaxLang
	lib/editor-common.generated
imports
	utils/annotations
	utils/debug
	utils/contract
	config
	common
	codegen/main

rules 
	
	init-declarations = 
		init-record-signatures;
		templatelang-init-options
    
rules
  declare-spx-global-symbols =
	dbg-compiler(!$[----Declaring global Symbols for: [<print-as-string>]]);
	list-loop(
			{| GetEnclosingModuleName
			 : 	declare-current-module-scope;
		 		with-spxverify(
					get-desugared-module-ast;
					declare-internal( declare-spxmodules-all( declare-global-symbols))
			  	)
			|}	
	)
	
	delcare-spx-scoped-symbols = 
		dbg-compiler(!$[----Declaring local Symbols for: [<print-as-string>]]);
		declare-internal(
			declare-spxmodules-all(
				declare-local-symbols
			)
		)
	
	
	declare-internal(declare-symbols) =  
		origin-track-forced(declare-symbols) => annotated-moduleDef
		; !annotated-moduleDef => Module(attrb* , modname , section*)  // updating module definitions
		; with-spxverify(
			 <get-annotation(get-package-annotation)>modname => Package( package-qname)
			  ; mId := <get-module-typed-qname>(package-qname, modname)
			  ; <index-update-existing-module-definition>(mId  ,  annotated-moduleDef)
  	  )
  	    
	
rules 
	declare-spxmodules-all(s):
		Module(attrb* , modname , section*) -> Module(attrb* , modname , m-sections*)
		where
			<alltd(s)>section* => m-sections*

	
	declare-local-symbols:
		SDFSection(definition*) -> SDFSection(declared-definition*)
		where
			<declare-sdf-definition-main>definition* => declared-definition*  
				 

	declare-local-symbols:
		SDFSectionEH(_,definition*) -><declare-local-symbols>SDFSection(definition*)

	declare-local-symbols:
	  STRSection(def*) -> STRSection(m-definition*)
    where
    	<declare-str-local-definition-main>def* => m-definition*
       
      
  declare-local-symbols: ESVSection(def*) -> <id>

  // Hook up to TemplateLang:
  // 1) convert syntax templates to SDF; declare the SDF
  // 2) convert syntax templates to Stratego; declare the Stratego code

  declare-local-symbols:
    TemplateSection(def*) -> <id>
    where with-spxverify(
      templatelang-declare-section;
      <map(template-production-to-sdf); declare-sdf-definition-main> def*;
      if templatelang-enabled then
        <map(template-to-prettyprint-strategy); declare-str-local-definition-main> def*
      end
      , !"Failed to declare local symbols in TemplateSection :: declare-local-symbols"
    )

  declare-local-symbols:
    TemplateOptions(def*) -> <id>
    where with-spxverify(
      templatelang-declare-section
      , !"Failed to declare local symbols in TemplateOptions :: declare-local-symbols"
    )

rules

	declare-global-symbols: SDFSection(def*) -> <id>

	declare-global-symbols: SDFSectionEH(_,def*) -> <id>

	declare-global-symbols: s@STRSection(def*) -> STRSection(m-definition*)
	where
		m-definition* := <declare-stratego-globals-top>def*
	
	
	declare-global-symbols: 
		ESVSection(def*) -> ESVSection(declared-definition*)
		where 
			declared-definition* := <declare-esv-globals-top>def*;
			current-package-name := <GetEnclosingPackageName>;
			with-spxverify(
				//storing esv section
				<index-symbol-definition>(current-package-name, ESVSection() ,  declared-definition*)
				, !$[Failed to index esv section of [current-package-name]] 
			) 
	
  // TemplateLang
  declare-global-symbols: TemplateSection(def*) -> <id>

  // TemplateLang
  declare-global-symbols: TemplateOptions(opt*) -> <id>

rules

	// Declaring current scope for further analyze
	declare-current-scope(| package-typed-qname , module-typed-qname)=
		with-spxverify(
		    <declare-current-package-scope>package-typed-qname
		   ;<declare-current-module-scope>module-typed-qname 
    )

	declare-current-package-scope :
		package-typed-qname -> <id>
		where
      with-spxverify(
        rules(GetEnclosingPackageName := package-typed-qname )
        , !"Failed to declare-current-package-scope"
      )

	declare-current-module-scope:
		module-typed-qname -> <id>
		where
			with-spxverify(
		 		rules( GetEnclosingModuleName := module-typed-qname)   
				, !"Failed to declare-current-module-scope"
			) 
			

rules
	declare-legacy-artifact(|resolved-path) : 
		legacy-content -> legacy-content
		where
		   < has-extension(|"sdf") 
			 + has-extension(|"def")
			 > resolved-path
		   ; <alltd(
		   	   declare-sdf-definition-main) >legacy-content

	declare-legacy-artifact(|resolved-path) : 
		legacy-content -> legacy-content
		where
			 < has-extension(|"str") 
			 + has-extension(|"rtree")
			 > resolved-path
		   ; <declare-legacy-str-imports> legacy-content
		     
rules 
	
	rename-id(|namespace) = 
		?x;
		namespace-qname-string := <package-qname-to-string> namespace;
	 	<concat-strings>["__internal" , "_", namespace-qname-string  , "_" , <print-as-string>x] 
	
	newDefData:	
		(scope@Package(QName(_)) , type, x) -> DefData(scope,  type, Internal() , x , x)
		
	newDefData(rename): 
 	(scope@Package(QName(_)) , type, x) -> defData   
	 where 
	 		x'  := <rename(|scope)>x;
	 		defData  := DefData(scope,  type, Internal() , x , x')
		     