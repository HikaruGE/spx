module context/sdf/declare
imports
	libstratego-sdf
  lib/editor-common.generated
	include/SpoofaxLang
imports
	context/-
	context/esv/declare
	codegen/-
	analyze/main
	normalize/signatures
	context/sdf/declare-signature
imports
	common
	utils/debug
	utils/annotations
	utils/attributes
	utils/contract
imports
	libstratego-sdf
  lib/editor-common.generated
	include/SpoofaxLang
	
  
rules
	setof-sdf-declarations = resolve-sdf-declarations
	
	bagof-sdf-declarations = <resolve-all-symbol-definitions-with-duplicates>(<id>, SDFDeclaration())
			  		
  resolve-sdf-declarations =
    <resolve-all-symbol-definitions>(<id>, SDFDeclaration())
  <+
    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] | "resolve-sdf-declarations" ,<debug-level-WARNING>); 
    fail

  resolve-atleast-one-sdf-declaration =
    <resolve-symbol-definition>( <id>, SDFDeclaration())
  <+
    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] 
                 | "resolve-atleast-one-sdf-declaration" ,<debug-level-WARNING>)
    ; fail

  resolve-NamespaceSort-declaration =
    <resolve-symbol-definition>( <to-scoped-symbol>, NamespaceSortDeclaration())
  <+
    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive NamespaceSort declaration for symbol [<print-as-string>]] 
                 | "resolve-NamespaceSort-declaration" , <debug-level-WARNING>)
    ; fail

     

rules
 // Traverse AST and declare sdf definition
 //	Instead of declaring in the Global Scope
 // now it is declared in a particular Scope.
 // Here scope is defined by (Package-QName, Module-QName)
 declare-sdf-definition-main= 	alltd(declare-sdf-definition)
 
 declare-sdf-usage-main = alltd(declare-sdf-usage)

rules
	declare-sdf-definition :
		context-free-start-symbols(s*) -> <id>
		where <declare-sdf-definition-main>s*
		where store-context-free-start-symbols(|<GetEnclosingModuleName>)

rules
	declare-sdf-definition:
    renamings(y) -> <id>
    where	<all(try(?symbol(_, <id>); declare-sdf-simple-definition))> y


	declare-sdf-definition:
    parameterized(x, y) -> parameterized(x, y)
    where	<declare-sdf-definition> unparameterized(x);
    			<alltd(declare-sdf-simple-definition)> y

rules

  declare-sdf-definition:
    p@prod(lhs, sort, attrs) -> <id>
    where	<declare-sdf-definition-internal> (p, lhs, sort, attrs) 

  
    declare-sdf-definition-internal:
    (prod, lhs, sort, attrs) -> <id>
    where dbg-declaration(! $[declaring sdf : [<print-as-string>prod]]| "SDF" , <debug-level-INFO> )
    where	x  := <get-rhs-sort-name>sort
    where if <is-lexical-sort>sort + IsInsideLexicalSyntaxBlock then 
    				sortType :=  LEXSort()
    			else
    				sortType :=  CFSort()
    			end 		
    where	<declare-signature>prod
  	where	with-spxverify(<topdown(try(declare-namespace-def))> lhs	,	!"declare-sdf-definition-internal | Failed while storing namespace-def ")
  	where	with-spxverify(
      			if <fetch-cons-name> attrs => cons then
	      			tuple := (x, cons);
	       			<index-symbol-definition>(tuple , SDFDeclaration() , prod ) // Needed for Sort.Cons references to the production.
	      		end
	    			, !"declare-sdf-definition-internal | Failed while storing sort.cons references "      
     		 	)
    where	with-spxverify(
      			<index-symbol-definition>(x, SDFDeclaration(),prod );
      			<index-symbol-definition>(x , SortDeclaration(), (x, sortType));
    	  		dbg-declaration(! $[Storing Declaration : [<print-as-string>x]  -> [<print-as-string>prod]]  | "SDF" , <debug-level-INFO> ) 
      			, !"declare-sdf-definition-internal | Failed while storing production in symbol table"
      		) 
 
  declare-signature:
  	p@prod(lhs, sort, attrs) -> <id>
  	where with-spxverify(
  						if not(<attrs(fetch(?reject()))> attrs) then
	        		<store-operation-declaration>p
	      		end
      			, !$[declare-sdf-definition-internal | Failed while trying to store operation declaration with following production [<print-as-string> p]]
  				)
 
 declare-namespace-def:
    namespacedef(name, sort) -> <id>
    where with-spxverify(	scoped-name  := <to-scoped-symbol> name	)
    where <index-symbol-definition>(scoped-name, NamespaceSortDeclaration(),sort)

  declare-sdf-definition:
		lex-syntax@lexical-syntax(lex-defintions) ->lex-syntax
		where 
			with-spxverify(
				{| IsInsideLexicalSyntaxBlock:
								mark-as-lexical-syntax-block;
								<declare-sdf-definition-main> lex-defintions
				|}
			)
			
	declare-sdf-definition:
		parameterized(x, y) -> parameterized(x, y)
  	where	<declare-sdf-definition> unparameterized(x);
  				<alltd(declare-sdf-simple-definition)> y


	declare-sdf-simple-definition:
		sort(x) -> <id>
		where with-spxverify(
	  				scoped-x:= <to-scoped-symbol>x;
	  				<index-symbol-definition>(scoped-x , SDFDeclaration(),x )
  				)
		where	dbg-declaration(!$[Storing Declaration [<print-as-string>scoped-x] -> [<print-as-string>x]] | "SDF" , <debug-level-INFO> )


rules
	declare-sdf-usage:
		prod(lhs, sort, attrs) -> <id>
    where <alltd(declare-sdf-usage)>lhs


	declare-sdf-usage:
		'sorts(s*) -> <id>
		where <alltd(declare-sdf-usage)>s*

	declare-sdf-usage:
		context-free-start-symbols(s*) -> <id>
		where <alltd(declare-sdf-usage)> s*	

  declare-sdf-usage:
		lexical-start-symbols(s*) -> <id>
	  where <alltd(declare-sdf-usage)>s*
	
	declare-sdf-usage:
    kernel-start-symbols(s*) -> <id>
    where <alltd(declare-sdf-usage)>s*

	//TODO : 
  // declare-sdf-usage:
  //   qsort(qname , x) -> <id>
  // 
    
	declare-sdf-usage:
    sort(x) -> <id>
    where with-spxverify( <index-sdf-usage(|Unqualified())>x , !"Indexing SDF Sort Call Sites failed. ")


	// For legacy artifacts only.
	// It is required for import def or sdf file. currently we support parameterized sort in 
	// a different way in spoofaxlang.
	declare-sdf-usage:
    parameterized-sort(x, y) -> <id>
    where
      if !y => [sort(y')]; <is-string> x; <is-string> y' then
        text := ${{x}[[{y'}]]};
       	<index-sdf-usage(|Unqualified())>( text , text)
      end

rules
	
	index-sdf-usage(|namespace):
		sortName-> <id>
		where is-string
		where if <not(verify-call-sites-already-registered(|namespace))>sortName then
			  			<resolve-all-symbol-definitions(
								fetch-sort-and-context
								|(LookupAllScope(), <ALL_AS_SET>)
							)>(sortName,  SortDeclaration())
						; is-not-empty-list 
						;	(		(filter(?(_, _, InternalScope())); is-not-empty-list)   
							<+	(filter(?(_, _, GlobalScope()))  ; is-not-empty-list)    
							<+  (filter(?(_, _, PublicScope()))  ; is-not-empty-list) 
							)
						;	?[(s,c,t)|_] 
						; !(s,(s,c,t))
						; index-sdf-usage(|namespace)
					<+ 
						<debug(!"Failed to find sdf sort : " )> sortName		   	
				 end
					   
	index-sdf-usage(|namespace) : 
  	(sortName , v) -> <id>
  	where with-spxverify( 
  					<index-symbol-definition> ((sortName,namespace), SDFUsage() , v) 
					, "Indexing  SDF Call Sites Failed"
					)
					 
  get-sdf-usage(|namespace) :
  	sortName -> result 
  	where <resolve-all-symbol-definitions(project-from-symboldef-to-symbol |(LookupLocalScope(), <ONLY_ONE>))> ((sortName , namespace),  SDFUsage())
  				; ensure-is-unique
  				; ?result   
					

	
	fetch-sort-and-context = 
		?SymbolDef(context, _ ,_, sortName, _) ;
		<is-string>sortName;
		GetEnclosingPackageName => enclosing-package;
		GetEnclosingModuleName  => enclosing-module;
		switch !context
        case ?enclosing-package                       : !InternalScope()
        case ?enclosing-module                        : !InternalScope()
        case (?Package(QName(_)) + ?Module(QName(_))) : !PublicScope()
        case ?Globals()                               : !GlobalScope()
    end;
  	?referred-scope;  
    !(sortName , context, referred-scope)  
 	
	fetch-sort-and-context = 
		?SymbolDef(context, k ,t, (sortName,_), is-overloaded) ;
		<fetch-sort-and-context>SymbolDef(context, k ,t, sortName , is-overloaded)
				
	
	verify-call-sites-already-registered(|namespace): 
		sortName  ->  <id>
		where is-string 
		where activate-scope(
						<get-sdf-usage(|namespace)>sortName => result 
						|<GetEnclosingPackageName>
					)
	
	verify-call-sites-already-registered(|namespace)= 
  	?sort(<id>);
  	verify-call-sites-already-registered(|namespace)
  	
  
  	
signature constructors 
	SDFSortType : Type 
	CFSort   : SDFSortType 
	LEXSort  : SDFSortType
	
	