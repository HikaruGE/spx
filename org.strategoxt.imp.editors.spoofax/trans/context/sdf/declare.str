module context/sdf/declare
imports
	libstratego-sdf
  lib/editor-common.generated
	include/SpoofaxLang
imports
	context/-
	context/esv/declare
	codegen/-
	analyze/main
	normalize/signatures
	context/sdf/declare-signature
imports
	common
	utils/debug
	utils/annotations
	utils/attributes
	utils/contract
imports
	libstratego-sdf
  lib/editor-common.generated
	include/SpoofaxLang
	

rules
  index-sdf-usage: 
  	(key, value)  -> <id> 
  	where
  		with-spxverify(
	  		<index-symbol-definition>( key, SDFUsage() , value)
	  		,!"Indexing SDF Usage"
	  	)
  
  get-sdf-usages = <resolve-all-symbol-definitions>( <id>, SDFUsage() )

rules
	
	setof-sdf-declarations = resolve-sdf-declarations
	
	bagof-sdf-declarations = <resolve-all-symbol-definitions-with-duplicates>(<id>, SDFDeclaration())
			  		
  resolve-sdf-declarations =
    <resolve-all-symbol-definitions>(<id>, SDFDeclaration())
    
  <+
    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] | "resolve-sdf-declarations" ,<debug-level-WARNING>); 
    fail
	
	
       
  resolve-atleast-one-sdf-declaration =
    <resolve-symbol-definition>( <id>, SDFDeclaration())
  <+
    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] 
                 | "resolve-atleast-one-sdf-declaration" ,<debug-level-WARNING>)
    ; fail

  resolve-NamespaceSort-declaration =
    <resolve-symbol-definition>( <to-scoped-symbol>, NamespaceSortDeclaration())
  <+
    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive NamespaceSort declaration for symbol [<print-as-string>]] 
                 | "resolve-NamespaceSort-declaration" , <debug-level-WARNING>)
    ; fail

     

rules
 // Traverse AST and declare sdf definition
 //	Instead of declaring in the Global Scope
 // now it is declared in a particular Scope.
 // Here scope is defined by (Package-QName, Module-QName)
 declare-sdf-definition-main=
    	alltd(declare-sdf-definition)

rules
	declare-sdf-definition :
		context-free-start-symbols(s*) -> <id>
		with
			<declare-sdf-definition-main>s*
		with
			store-context-free-start-symbols(|<GetEnclosingModuleName>)

rules
	declare-sdf-definition:
    renamings(y) -> <id>
    where
      <all(try(?symbol(_, <id>); declare-sdf-simple-definition))> y


	declare-sdf-definition:
    parameterized(x, y) -> parameterized(x, y)
    where
      <declare-sdf-definition> unparameterized(x);
      <alltd(declare-sdf-simple-definition)> y

rules

  declare-sdf-definition:
    prod @ prod(lhs, sort, attrs) -> <id>
    where
    	<declare-sdf-definition-internal> (prod, lhs, sort, attrs)

  
  declare-sdf-definition-internal:
    p@(prod, lhs, sort, attrs) -> <id>
    where
  	  dbg-declaration(! $[declaring sdf : [<print-as-string>p]]| "SDF" , <debug-level-INFO> ); 
      x:= <get-rhs-sort-name>sort
    where  
      with-spxverify(
	   		// reject productions shouldn't generate signatures ever
	      if not(<attrs(fetch(?reject()))> attrs) then
	        <store-operation-declaration>prod
	      end
      , !$[declare-sdf-definition-internal | Failed while trying to store operation declaration with following production [<print-as-string> prod]]
      )
  	where
  	  with-spxverify(
        <topdown(try(store-namespace-def))> lhs
       ,!"declare-sdf-definition-internal | Failed while storing namespace-def "
      );
      with-spxverify(
	      if <fetch-cons-name> attrs => cons then
	      	// DR fails if this tuple is placed in-line ...
          tuple := (x, cons);
	       	//TODO : check why it is needed 
          // Needed for Sort.Cons references to the production.
          <index-symbol-definition>(tuple , SDFDeclaration() , prod )
	      end
	    	, !"declare-sdf-definition-internal | Failed while storing sort.cons references "      
      )
    where
      with-spxverify(
        	<index-symbol-definition>(x , SortDeclaration(),x );
    	  	<index-symbol-definition>(x, SDFDeclaration(),prod );
    	  	dbg-declaration(! $[Storing Declaration : [<print-as-string>x]  -> [<print-as-string>prod]]
      	                     | "SDF" , <debug-level-INFO> ) 
        , !"declare-sdf-definition-internal | Failed while storing production in symbol table"
      ) 
   where
     <alltd(declare-sdf-usage)> lhs      
    

  store-namespace-def:
    namespacedef(name, sort) -> <id>
    where with-spxverify(
    	scoped-name  := <to-scoped-symbol> name
  	)
    where
      <index-symbol-definition>(scoped-name, NamespaceSortDeclaration(),sort)

  declare-sdf-definition:
		lex-syntax@lexical-syntax(lex-defintions) ->lex-syntax
		where 
			with-spxverify(
				{| IsInsideLexicalSyntaxBlock:
								mark-as-lexical-syntax-block;
								<declare-sdf-definition-main> lex-defintions
				|}
			)


	declare-sdf-definition:
		parameterized(x, y) -> parameterized(x, y)
  	where
			<declare-sdf-definition> unparameterized(x);
  		<alltd(declare-sdf-simple-definition)> y

	declare-sdf-definition:
		'sorts(_) -> <id>
		where with-spxverify(alltd(declare-sdf-usage))

	declare-sdf-definition:
		context-free-start-symbols(_) -> <id>
		where with-spxverify(
    	alltd(declare-sdf-usage)
    )	

  declare-sdf-definition:
		lexical-start-symbols(_) -> <id>
	  where with-spxverify(
	  	alltd(declare-sdf-usage)
  	)

	declare-sdf-definition:
    kernel-start-symbols(_) -> <id>
    where with-spxverify(
      alltd(declare-sdf-usage)
    )

	declare-sdf-simple-definition:
		sort(x) -> <id>
		where with-spxverify(
	  	scoped-x:= <to-scoped-symbol>x;
	  	<index-symbol-definition>(scoped-x , SDFDeclaration(),x )
  	)
		where
			dbg-declaration(!$[Storing Declaration [<print-as-string>scoped-x] -> [<print-as-string>x]] | "SDF" , <debug-level-INFO> )


rules

	declare-sdf-usage:
    sort(x) -> <id>
    where with-spxverify(
    	<index-sdf-usage>( x , x)
  	)

	declare-sdf-usage:
    parameterized-sort(x, y) -> <id>
    where
      if !y => [sort(y')]; <is-string> x; <is-string> y' then
        text := ${{x}[[{y'}]]};
       	<index-sdf-usage>( text , text)
      end

rules

	propose-completion:
    sort(COMPLETION(x)) -> [decl*, use*]
    where with-spxverify(
      decl* := <setof-sdf-declarations> x;
      use*  := <get-sdf-usages> x
    )

	propose-completion:
    NOCONTEXT(COMPLETION(x)) -> [decl*, use*]
    where with-spxverify(
      decl* := <setof-sdf-declarations> x;
      use*  := <get-sdf-usages> x
    )