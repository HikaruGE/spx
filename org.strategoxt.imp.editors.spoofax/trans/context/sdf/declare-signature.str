module context/sdf/declare-signature

imports 
	include/SpoofaxLang
imports		
	common
	libstrc 
	utils/debug		
imports 
	context/scope-tree
	context/sdf/declare
	context/signatures
	codegen/sdf/to-name-analysis
		

// TODO : refactor common functionily in seperate rules/strategy
// DON'T like several things about this implementation. Need to refactor/re-implement.


//TODO : write a pretty printer to convert Get-Operation-Declaration to Signatures' Aterm 

rules 
	getOperationSignatures = 
		?opname; 
 		<resolve-symbol-declarations(all-keys-Get-Operation-Signature, bagof-Get-Operation-Signature)><to-scoped-symbol>opname 
 	<+
 		<debug-declaration> $[Waring | Failed to retrive OperationSignatures for opname[<pp-aterm>]. Returning  empty list . ];
 		![]
 		
strategies 
	// Returns right hand side of the production. In case of A -> B, it
	// retunrs B.
	get-rhs-sort-name = 
			try(?cf(<id>) + ?lex(<id>));
      repeat(?label(_, <id>));
      (?sort(<id>) + ?parameterized-sort(<id>, _))
		
rules 
	
	//Stores operation name and operation declarations 
	
	/**
  * Gets the operation name from the Production. It actually search all the attributes 
  * in the attribute list and create  a dynamic rule that stores operation name. 
  */
  get-opration-name = where(getfirst(fetch-cons-name) ; store-operation-name)  
  
  /**
  *	Store operation name from the RHS of the Production, i.e. from fun constructors.
  * It creates a dynamic rule to store the operation name.
  */
  store-operation-name : opname-> opname
  with  
		rules (get-op-name: _ -> opname)
  where 
  		<debug-declaration> $[Operation Name :  [opname]]
	
	store-operation-declaration
  	=  ?p@prod(lhs , rhs-sort, attrs(attribute-list))
  		;rhs-sort-name := <get-rhs-sort-name>rhs-sort	
  		;{|lhs-sort, get-op-name:
  					<find-sorts>lhs
  					;<get-opration-name>attribute-list  
  					;operation-name := <get-op-name>
  					;lhs-operands-types := <reverse><bagof-lhs-sort>  
  					;create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p) 
  		  |}
			  
	store-operation-declaration 
  	= 	?p@prod(lhs , rhs-sort, no-attrs()) 
  		;rhs-sort-name := <get-rhs-sort-name>rhs-sort	
  	  ; {|lhs-sort :
	  				if (IsInsideLexicalSyntaxBlock<+ (!rhs-sort; ?lex(sort(rhs-sort-name))))then 
							 rules ( lhs-sort :+ _ -> $[String] )
						else
							<find-sorts>lhs //TODO : consider ignorig :ID->ID-Prime operation decl 
						end
	  				;lhs-operands-types := <reverse><bagof-lhs-sort>
	  				;operation-name := ""
	  				;create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p)  
			 |}

	/*
	store-operation-declaration 
  	= ?p@prod(_ , lex(sort(rhs-sort-name)), no-attrs())
  		; {|lhs-sort :
							rules ( lhs-sort :+ _ -> $[String] )
		  				;lhs-operands-types := <reverse><bagof-lhs-sort>
		  				;operation-name := ""
		  				;create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p)  
			 |}
	*/
			 
  find-sorts  
  	= alltd(get-sort-decl)

rules  
	
	// Gets sort declaration from the production	
	get-sort-decl:
		a@alt(frstSort , restSort*) -> a
		where
			{| lhs-sort:
						<find-sorts>frstSort
					;	<find-sorts>restSort*
					;	inner-sort* := <bagof-lhs-sort;reverse>
					;	intermediate-resultant-sort-type :=<string-replace(|"(", "_Of_");string-replace(|")", "")> <separate-by(|"_"); concat-strings>inner-sort* 
			|}
			; <map(create-opname2opdecl-mapping(|"", intermediate-resultant-sort-type, "[N/A]" ))>inner-sort*	
			; rules( lhs-sort :+ _ -> intermediate-resultant-sort-type)
	
	get-sort-decl: 
		seq( frst , rest*)-> seq( frst , rest*)
		where
			{| lhs-sort:
						<find-sorts>frst
					;	<find-sorts>rest*
					;	inner-sort* := <bagof-lhs-sort;reverse>
					;	intermediate-resultant-sort-type :=<string-replace(|"(", "_Of_");string-replace(|")", "")> <separate-by(|"_"); concat-strings>inner-sort* 
					  
			|}
			; create-opname2opdecl-mapping(|"", inner-sort*, intermediate-resultant-sort-type, "[N/A]" ) 	
		 	; rules( lhs-sort :+ _ -> intermediate-resultant-sort-type)
	
	get-sort-decl: 
		i@iter-star ( x ) -> i
  	where 
  		{| 	lhs-sort:
  					<find-sorts>x
  				; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
  		|}
  		;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")> inner-sorts-tostring])]
  		;rules ( lhs-sort :+ _ -> ret-string)
	
	
	get-sort-decl: 
		i@iter( x ) -> i
  	where 
  		{| lhs-sort:
  					<find-sorts>x
  				; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
  		|}
  		;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
  		;rules ( lhs-sort :+ _ -> ret-string) 
			  
 	get-sort-decl:
 		p@parameterized-sort(x, _) ->p
		with 
			rules( lhs-sort :+ _ -> x)
			
  get-sort-decl: 
  	s@sort(x) -> s
  	with 
  		rules( lhs-sort :+ _ -> x)
	
	get-sort-decl: 
		o@opt(parameterized-sort(x, _)) -> o
  	with rules( lhs-sort :+ _ -> $[Option([x])])
  	
	get-sort-decl: 
		opt(sort(x)) -> opt(sort(x))
  	with rules( lhs-sort :+ _ -> $[Option([x])])
	
	get-sort-decl: 
		i@iter-star-sep(operand1, operand2) -> i
 		with {|lhs-sort:
			 					 <find-sorts>operand1
		 					  ;<find-sorts>operand2
		 					  ; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>    
				  |}
				 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
  				;rules ( lhs-sort :+ _ -> ret-string)	 
  				 
	get-sort-decl: 
		i@iter-sep(operand1, operand2) -> i
		with {|lhs-sort:
			 					 <find-sorts>operand1
		 					  ;<find-sorts>operand2
		 					  ;inner-sorts-tostring 
		 					   		:= <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>    
				  |}
				 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
  				;rules ( lhs-sort :+ _ -> ret-string)	 

		
strategies
		
	assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)= 
			?[hd|tl]
			;(expected-op-name , expected-op-sorts*, ex-resultant-sort) := hd
			;(
			 			 operation-name := expected-op-name 
						;opernand-sorts* := expected-op-sorts*
						;resultant-sort := ex-resultant-sort
				  <+
						<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>tl
				)	 
				
	/**
	* Create a dynamic rule that mapes operation name to the operation declaration.
	*	Addinationally, Arity of Operation Decl. has also been stored.
	* 
	* @Param operation-name.
	* @param Sort or Operand Types involve in the operation. 
	* @Param Resultant Sort from the operation .
	* @Param Production related to the operation.  
	*	
	*/		  
	create-opname2opdecl-mapping(|operation-name, opernand-sorts*, resultant-sort , production) =
		where (<debug-declaration> $[DeclareSDF | Storing Signature for following production: [<pp-aterm> production]])
		//;enable-declaration-debugging
		;available-opdecl*     := <getOperationSignatures>operation-name
		;scoped-operation-name := <to-scoped-symbol>operation-name   
		;if(
		 		(!available-opdecl* => []) 
				<+ 
				not (<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>available-opdecl*)
			)
			then 
				record-operation-declaration(|scoped-operation-name  , operation-name  , opernand-sorts* , resultant-sort) // storing this operation declaration 
 		else 
 		 		<debug-declaration> 
 		 			$[
 		 				DeclareSignature | Waring | There is an existing operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm>(operation-name, opernand-sorts* , resultant-sort)] 
 		 				DeclareSignature | Debug-info: scoped-op-name [<pp-aterm>scoped-operation-name]. 
 		 			 ]
		end
		//;disable-declaration-debugging
			
	
	create-opname2opdecl-mapping(|operation-name, resultant-sort , production): alt-sort -> alt-sort  
		where 
			  alt-srt-lst := [alt-sort]
			  ;create-opname2opdecl-mapping(|operation-name, alt-srt-lst, resultant-sort , production)

	record-operation-declaration ( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) = 
		where (
			arg-length := <length>operand-sort*;
			rules(
					Get-Operation-Signature  :+  scoped-op-name   -> (opname  , arg-length )
				 	Get-Operation-Declaration:+  scoped-op-name   -> (opname  , operand-sort* , resultant-sort)
				)
			; <debug-declaration> $[DeclareSignature | Stored operation declration : [<pp-aterm> ( opname , operand-sort* ,  resultant-sort) ].]
			; <debug-declaration> $[DeclareSignature | Stored operation signature  : [<pp-aterm> scoped-op-name] -> [<pp-aterm> (opname, <length>operand-sort*)].]
	) 
		
	record-operation-declaration-at-global-scope ( | opname , operand-sort* ,  resultant-sort) = 
		where ( <to-global-symbol> opname => scoped-op-name);	
		record-operation-declaration( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) 


rules
	init-record-signatures = 
			record-operation-declaration-at-global-scope ( |"None", [] 		,"Option(a)"); 
			record-operation-declaration-at-global-scope ( |"Some", ["a"] ,"Option(a)");
			record-operation-declaration-at-global-scope ( |"Cons", ["a","List(a)"] ,"List(a)");
			record-operation-declaration-at-global-scope ( |"Nil", [] ,"List(a)");
			record-operation-declaration-at-global-scope ( |"Conc", ["List(a)" , "List(a)"] ,"List(a)")