module context/resolve-symbols

imports
	include/SpoofaxLang 
	lib/editor-common.generated
imports 
	context/signatures
	context/store-imports
	context/scope-tree
	context/resolve-declarations
	normalize/signatures
	codegen/compile 
imports 	 
	common
	utils/annotations
	utils/path
	utils/debug
	
	
rules 
	get-module-abs-filepath : Module(qname) -> result
	where 
			result := <DeclaredModule>qname 
			<+
			debug(!"SymbolTable| Failed to retrieve module's abs file path.");fail
			 
	get-package-abs-filepath : Module(qname) -> result
	where 
			result := <DeclaredPackage>qname 
			<+
			debug(!"SymbolTable| Failed to retrieve package's abs file path.");fail
	
rules	
	// Add scopes for the symbol 
	to-global-symbol =
		!(Globals(), <id>)
	<+
		<debug> $[Type| FAIL | Failed to convert it to Global symbol. <symbol> [<pp-aterm-forced>]]
		;fail	
		
	to-scoped-symbol =  
		!(<GetEnclosingPackageName> , <GetEnclosingModuleName> , <id>)
	<+
		to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global 
	<+
		<debug> $[Type| FAIL | Failed to convert it to scoped symbol. 
										<enclosing package> [<pp-aterm><GetEnclosingPackageName>] <enclosing module>[<pp-aterm-forced><GetEnclosingModuleName>] <symbol> [<pp-aterm-forced>]]
		;fail	
		 
	// Strip Scope and retuns the symbol 
	remove-scope-from-symbol = ?(_,_, <id>) + ?(Globals(), <id>)

rules
	
	//After ensuring result is unique i.e. list contains only one element, it returns the unique result
	ensure-is-unique = ?[<id>] <+ debug(!"SymbolTable| Failed to resolve unique declaration.");fail
	
	//resolving symbol in global scope and returing list of result	
	resolve-symbol-global-declarations(key-resolver, value-resolver)= 
		?symbol; // NOTE : symbol does not contain any scope information
		where(not(?(_,_) <+ ?(_,_,_)));
		// Looking for the symbol in the Globals() Scope
		where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Global Scope.]);
		<resolve-symbol-declarations-internal(key-resolver, value-resolver,?(Globals() , symbol))>symbol;
		where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Global Scope. Result: [<pp-aterm>]]);
		is-not-empty-list
	<+
		<debug-symboltable>$[SymbolTable| FAIL| Failed to resolve following symbol [<pp-aterm>] in Global Scope];
		fail
	
	//resolving symbol in global scope only and ensuring result is unique
	resolve-symbol-unique-declaration(key-resolver, value-resolver)=
		where(?( Globals(), symbol ))
		;<resolve-symbol-global-declarations(key-resolver, value-resolver)> symbol	
		;ensure-is-unique // verify as resolved unique declaration 
	<+	
		<debug-symboltable>$[SymbolTable| FAIL| Failed to retrieve uniqe declaration in global scope."];fail
	
	// Resolving unique declaration of symbol in the scope (current-package, current-module)
	// Symbol is resolved using the specified strategy parameter, i.e. using key-resolved and value-resolved  
	resolve-symbol-unique-declaration(key-resolver, value-resolver)=
		?( current-package , current-module, symbol )
		;<resolve-symbol-unique-declaration(key-resolver, value-resolver|current-package , current-module)>symbol	
	
	
	// resolving unique declaration - generic implementation   
	resolve-symbol-unique-declaration(key-resolver, value-resolver|current-package , current-module)=
		resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)
		;ensure-is-unique // verify as resolved unique declaration 
	<+	
		<debug-symboltable>$[SymbolTable| Failed to retrieve unique declaration.];fail
	
	// resolving declaration in global scope 
	resolve-symbol-declarations(key-resolver, value-resolver) = 
		?( Globals(), symbol )
		;<resolve-symbol-global-declarations(key-resolver, value-resolver)> symbol
	
	// resolving declartion in the scope mentioned
	resolve-symbol-declarations(key-resolver, value-resolver) = 
		?( current-package , current-module,symbol )
		;<resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)> symbol
	
	// resolving declarations incrementally	
	resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)= 
		?symbol; // NOTE : symbol does not contain any scope information
		(	
				// Looking for the symbol in the current Module Scope
				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Current Scope [<pp-aterm>(current-package , current-module)].]);
				<value-resolver>(current-package , current-module, symbol); 
				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Current Scope. Result: [<pp-aterm>]]);
				is-not-empty-list
			<+
				// Looking for the symbol in the parent enclosing scope => Package Scope
				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package Scope ([<pp-aterm>current-package],_)  or in Global Scope]);
				<resolve-symbol-declarations-internal(
					key-resolver, 
					value-resolver, 
					?(current-package , _ , symbol) + ?(Globals() , symbol) // NOTE : Currently we combined Globals() + Enclosing package search in ONE loopup.
				)>symbol;
				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package + Global Scope. Result: [<pp-aterm>]]);				 	 
		 	 	is-not-empty-list
			<+
				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Imported Scopes.]);
				where( 
					!current-package => Package(untyped-package-qname);
					!current-module  => Module(untyped-module-qname)
					;<get-all-usings>( untyped-package-qname , untyped-module-qname) => imported-typedqname*
					;<debug-symboltable>$[SymbolResolver| Getting List of dependening-on packages/modules : [<pp-aterm>]]
					
				);
				<resolve-imported-symbol-declarations(key-resolver  , value-resolver)>(symbol, imported-typedqname*);
				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Imported Scopes. Result: [<pp-aterm>]]);
				is-not-empty-list
			<+
				<debug-symboltable>$[SymbolTable| FAIL| Failed to resolve following symbol [<pp-aterm>] in namespace [<pp-aterm>(current-package , current-module)]];
				fail
		)

	resolve-symbol-declarations-internal(key-resolver,value-resolver,namespace-filter) =
		key-resolver;
		filter(namespace-filter);
	  mapconcat(value-resolver)
	<+     			 
		<debug-symboltable>$[SymbolTable| FAIL | resolve-symbol-declarations | Failed to resolve following symbol [<pp-aterm>]]
		;fail

	resolve-imported-symbol-declarations(key-resolver,value-resolver):
		(symbol, scopes*) -> resolved*
		where 
			if !scopes* => [] then 
				<debug-symboltable> $[SymbolTable| FAIL| Failed to resolve following symbol: [<pp-aterm>symbol] as there is no scope specified. ];
				fail
			else
				!scopes* => [currentscope|rest*]	
			end
		where 
			if !currentscope => Package(_) then 
				resolved* := <is-not-empty-list><resolve-symbol-declarations-internal(key-resolver, value-resolver,?(currentscope, _ , symbol))>symbol
			else
				if !currentscope => Module(_) then 
					resolved* := <is-not-empty-list><resolve-symbol-declarations-internal(key-resolver, value-resolver,?(_ , currentscope , symbol))>symbol
				end
			end;
			where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Imported Scopes. Result: [<pp-aterm>resolved*]. Found in :[<pp-aterm>currentscope] ])
		<+
			resolved* := <resolve-imported-symbol-declarations(key-resolver  , value-resolver)> ( symbol, rest*)
	
	
	// Verifies tha tthe current term is not a empty list 
	is-not-empty-list = ?[_|_] 
			 