module context/store-imports 
imports
	include/SpoofaxLang 
	lib/editor-common.generated
imports 
	context/-
	normalize/signatures
	codegen/compile
imports 	
	common
	utils/annotations
	utils/path
	utils/debug  

rules 			
	
	// Reference Resolving 
	resolve-package-references = 
		?list-of-package-tqnames;
		<list-loop(
			// Get the list of enclosed modules
			// and then get module declarations
			// Afterwards, from the declarations, import references are resolved.
			where(<debug-compiler>$[ resolve-package-references |  Currently working on package : [<pp-aterm>]]);
			get-enclosed-modules; 
			get-module-declarations;
			origin-track-forced(map(store-import-references))
		<+
			where(<debug-compiler>$[resolve-package-references | Failed to resolve package refernece:[<pp-aterm>]]);fail
		)>list-of-package-tqnames
		<+ 
		<debug-compiler>$[resolve-package-references | Failed to resolve package referneces:[<pp-aterm>]];fail
		


rules
	store-import-references: m@Module(attrb*,modname,section*) -> Module(attrb*,modname,resulting-section*)
		with 
			!modname => SPXModuleName(<id>);
			 <debug-symboltable>$[ImportReferenceResolver| store-import-references|Resolving import references for module : [<pp-aterm>]] 
		where
			Package(package-qname) :=<get-annotation(get-package-annotation)>modname// get package-name from the modname
		where 
			{| GetEnclosingPackageName, current-source-directory, GetEnclosingModuleName:
					rules(
						GetEnclosingPackageName      := package-qname //TODO refactor: most likely it is no longer needed 
						GetEnclosingModuleName			 := modname 				
						current-source-directory     := <get-module-untyped-qname;
																					   DeclaredModule;
																					   dirname
																				    >(package-qname, modname)
					)
					;<alltd(store-import-declaration(|<GetEnclosingPackageName>))> section* => resulting-section*
					;!Module(attrb*,modname,resulting-section*) => modifiedModuleDescription
					;<store-declaration(|Modules())>(<get-module-untyped-qname>(package-qname, modname),  modifiedModuleDescription) //updating with import reference annotation	 
			|}
			
	store-import-declaration(|enclosing-namespace-qname): 
		i@ImportPackage(qname@QName(package-qname-parts*)) -> annotated-import-decl
		where
			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing package reference :[<pp-aterm>]]
		where 
			if <DeclaredPackage>qname then
				<store-spx-import-declaration(|enclosing-namespace-qname)> Package(qname)
				;annotated-import-decl:= i
			else
				annotated-import-decl:= <add-annotation(|Unresolved())>i
				;<debug-symboltable>$[ImportReferenceResolver| store-import-declaratio|Failed to resolve following import : [<pp-aterm>]]	
	 		end
	
	store-import-declaration(|enclosing-namespace-qname) :
		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <store-import-declaration(|enclosing-namespace-qname)>ImportSpxModule(QName([package-name]), SPXModuleName(modname)) 
		 
	store-import-declaration(|enclosing-namespace-qname) :
		i@ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> annotated-import-decl 
		where 
			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing module reference : [<pp-aterm>]]
		with
			module-qname := <get-module-untyped-qname> (package-qname-parts , modname)//TODO: construct modules qualified name
		where 
			if <DeclaredModule>module-qname then
					<store-spx-import-declaration(|enclosing-namespace-qname)> Module(module-qname)
					;annotated-import-decl:= i
			else
					annotated-import-decl:= <add-annotation(|Unresolved())>i
					;<debug-symboltable> $[Store-import-declaration| Warning |Failed to resolve following import : [<pp-aterm>]]	
		 	end		
		 
		// Store import references in the 2nd pass of the traversals
	store-import-declaration(|enclosing-namespace-qname):
		i@ImportPackage(Name(package-name)) -> annotated-import-decl 
		where 
			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing reference : [<pp-aterm>]]
		where 
			if <DeclaredPackage>QName([package-name]) then
				<store-spx-import-declaration(|enclosing-namespace-qname)> Package(QName([package-name]))
				;annotated-import-decl:= i 			
			else
				// Seems like package-name is not declared as a SPX package 
				// Hence, looking for it in the file system as any external/legacy
				// artifact.   
				result:= <store-import-declaration(|enclosing-namespace-qname)>ImportLegacyArtifact(Name(package-name))
			 ;if not(<get-annotation(get-unresolved-symbol-annotation)>result) then
					//import is resolved as legacy artifact and found in local file system 
					annotated-import-decl:= result
				else
					//Not found in the file system. Hence, just ignoring it and annotating it.
					//and marking it as Unresolved()		
					annotated-import-decl:= <add-annotation(|Unresolved())>i
				end	  
			end 

	store-import-declaration(|enclosing-namespace):
		i@ImportLegacyArtifact(Name(modulename))  -> annotated-import-decl 
		where 
			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing leagacy/external artifact reference : [<pp-aterm>]]
		where 
			resolved-path := <resolve-legacy-import-path(|<current-source-directory>)>modulename
			;if (!resolved-path => Unresolved()) then 
				<debug-symboltable>$[SymbolTable|storing enclosing imports reference| FAIL <UsingLegacyArtifacts>: [<pp-aterm>i]]
				;annotated-import-decl :=  <add-annotation(|Unresolved())>i
			else
				annotated-import-decl :=  i
			end	
		with
			rules(
					UsedLegacyArtifacts:   (Globals(), modulename) -> resolved-path
					UsingLegacyArtifacts:+ enclosing-namespace	   -> (Globals(), Module(Name(modulename)), resolved-path)    
				)
			;<debug-symboltable>$[ImportReferenceResolver| storing enclosing imports reference| <UsingLegacyArtifacts>: [<pp-aterm>enclosing-namespace]-> [<pp-aterm>(Globals(), Module(Name(modulename)), resolved-path)]]
			
	store-spx-import-declaration(|importedby-package): 
		imported -> imported
		where 
			!importedby-package => QName(_)
		where 
			module-untyped-qname := <get-module-untyped-qname>(importedby-package , <GetEnclosingModuleName>);
			rules (
				UsedBy:+ imported   -> importedby-package  
				Using :+ (importedby-package, module-untyped-qname) -> imported 
			)
		where
			<debug-symboltable>$[ImportReferenceResolver| storing enclosing imports reference| <Using>: ([<pp-aterm>importedby-package] , [<pp-aterm>module-untyped-qname])-> [<pp-aterm>imported]]
				