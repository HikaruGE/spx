module context/scope-tree
imports
	include/SpoofaxLang
	include/libtemplatelang 
imports 
	context/signatures 
	context/resolve-symbols
	context/symboltable
	normalize/signatures
imports 	
	common
	utils/debug
	utils/contract

rules
	store-declared (| namespace) = where(not(?(_,_))) ; <store-declared(|namespace)>(<id> ,<id>)
	
	store-declared(| namespace) : 
		(x,d) -> <id>
		where
			rules( Declared :+ (namespace,x) -> d )
			
	get-declared(|namespace) = !(namespace, <id>);  Declared  		 
	
	get-all-declared(|namespace) = !(namespace, <id>);  bagof-Declared
	
	get-all-declared-by-type(|namespace) = all-keys-Declared ; filter(?(namespace, _));	mapconcat(bagof-Declared)

	undef-declared (|namespace) :
		x -> x
		where
			all-keys-Declared;
			filter(?(namespace, x));
			map(\y -> <rules(Declared :- y)>\)

	undef-declared (|namespace) :
		() -> ()
		where
			all-keys-Declared;
			filter(?(namespace, _));
			map(\y -> <rules(Declared :- y)>\)
	
rules
	
	add-to-compile-queue = verify(?Package(QName(_))  |<id> , "Package(QName(_)) @add-to-compile-queue ") ; store-declared(|CurrentlyCompilingFlag())
	
	is-in-compile-queue = verify(?Package(QName(_))  |<id> , "Package(QName(_)) @is-in-compile-queue") ;  get-declared(|CurrentlyCompilingFlag())
	
	should-compile-this-package = not(is-in-compile-queue)
	
	add-to-compiled-modules = verify((?Module(QName(_)) , String)  |<id> , "Module(QName(_)) @add-to-compiled-modules") ;   store-declared(|CompiledModuleFlag() )	

	is-a-compiled-module = verify(?Module(QName(_))  |<id> , "Module(QName(_)) @is-a-compiled-module") ;  get-declared(|CompiledModuleFlag())
	
	add-to-analyzed-modules = verify((?Module(QName(_)) , String)  |<id> , "Module(QName(_)) @add-to-analyzed-modules") ;   store-declared(|AnalyzedModuleFlag() )	

	is-a-analyzed-module = verify(?Module(QName(_))  |<id> , "Module(QName(_)) @is-a-analyzed-module") ;  get-declared(|AnalyzedModuleFlag())

	get-all-analyzed-modules-locations =  get-all-declared-by-type(|AnalyzedModuleFlag()) ; make-set
	
	add-to-analyzed-packages-queue = 	verify(?Package(QName(_))  |<id> , "Package(QName(_)) @add-to-compile-queue ") ; store-declared(|AnalyzedPackageFlag())
	
	is-in-analyzed-packages-queue  = verify(?Package(QName(_))  |<id> , "Package(QName(_)) @is-in-compile-queue") ;  get-declared(|AnalyzedPackageFlag())
	
	set-already-reinitialized =  <store-declared(|ReinitCompileSessionFlage())> <get-constructor>ReinitCompileSessionFlage()
	
	is-already-reinitialized =  <get-declared(|ReinitCompileSessionFlage())> <get-constructor>ReinitCompileSessionFlage()	
	
	is-legacy-artifact-resolved = verify( ?(ns,modulename,resolved-path) | <id> , "(ns,modulename,resolved-path) @is-legacy-artifact-resolved");  !(modulename,resolved-path) ; get-declared(|ResolvedExternalArtifactFlag(ns))
	
	add-legacy-artifact-as-resolved = verify( ?(ns , modulename, path) | <id> , "(ns , modulename, path)  @add-legacy-artifact-as-resolved") ; !((modulename,path), path) ; store-declared(|ResolvedExternalArtifactFlag(ns)) 

signature constructors 
	LibInGlobalNamespace : Flag 

rules 
	index-lib-in-global-cache = 
		? module-name
		; <index-symbol-definition>(module-name, LibInGlobalNamespace(),  module-name)
	  
	  
	is-lib-exists-in-global-cache= 
		? module-name
		; <resolve-symbol-definition>(module-name, LibInGlobalNamespace())


