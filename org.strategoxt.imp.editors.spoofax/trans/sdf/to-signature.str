module sdf/to-signature
imports 
	libstratego-sglr
imports
	lib/editor-common.generated
imports 
	common
	analysis
imports 
	sdf/map-signatures
	sdf/analysis
	sdf/to-sdf

rules
	
	/* Generating Signatures for all the SDF files */
	parse-str-string =
    parse-string(
      strsglr-report-parse-error
    | <import-term(lib/Stratego-Sugar.tbl)>
    )  
	
	to-signature-as-rtree =  
		parse-str-string ; pp-aterm
		
	to-signature-all:
		(def, path , project-path) -> None()
		where  
			 	(name, relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
			 	;<debug> $[Spoofax-lang|Generating signature for the following package : [name]]
			 	;sig-file-name := $[[name].signature] 
			 	;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]] 
			 	;output-path-str 		:= <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir , sig-file-name)
			 	;output-path-rtree 	:= <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, sig-file-name)
			 	;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>
			 	;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
			 	;<ensure-exists>( project-path , autogen-dir )
				;<save-to-file>( output-path-str, generated-signatures-string)
				;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
				;rules (signature-import-path:=$[[relative-autogen-path]/[sig-file-name]])  
rules 
	
	//generate signature 
	get-signature-contents(|moduleName): signatures-string ->
$[module [moduleName]
signature
    constructors
       [signatures-string]
				
signature
    constructors
          Some : a -> Option(a) 
          None : Option(a)

signature
    constructors
          Cons : a * List(a) -> List(a)
          Nil  : List(a)
          Conc : List(a) * List(a) -> List(a)
]  
 
    	
	get-all-signatures-as-string 
  		= <mapconcat(bagof-Get-Operation-Declaration);operation-decl-to-string><all-keys-Get-Operation-Singature>
  
  operation-decl-to-string : [] -> $[]
  operation-decl-to-string : 
  	[first-op-decl | rest-op-decl* ] 
  		-> $[[current-op-decl-string] 
  			[rest-op-decl-string]]
  		where 
  			(opname, operands*, resultant-sort) := first-op-decl
  			;if (!operands* => []) then
  			 	current-op-decl-string := $[[<opname-to-string>opname]: [resultant-sort]]
  			else
  				current-op-decl-string := $[[<opname-to-string>opname]: [<lhs-operands-to-string>operands*] -> [resultant-sort]]
  			end		 
  			;rest-op-decl-string := <operation-decl-to-string> rest-op-decl* 
 	
 	opname-to-string : 
 		opname -> opname-string
 		where 
 				if (!opname => "") then 
 						opname-string := $[]
				else
					 opname-string  := opname
				end
				
  lhs-operands-to-string : 
		[] -> $[]
  lhs-operands-to-string : 
  	[last] -> $[[last]] 
  lhs-operands-to-string : 
  		[hd-operand|rest*] -> $[[hd-operand-string] * [rest-operand-string]]
  		where
  				not (![] => rest*) 
  		where 
  			  hd-operand-string := hd-operand 
  			  ;rest-operand-string := <lhs-operands-to-string>rest* 