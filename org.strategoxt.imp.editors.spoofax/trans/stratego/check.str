module stratego/check

imports
	 common
	 libstratego-lib
 	 libstrc
	 stratego/analysis
	 sdf/analysis
	 include/SpoofaxLang
	 lib/editor-common.generated

rules 
	/*internal*/ require(s) = not(s)
	
	//TODO : Use new Is-declared in other cases where needed. 		
  is-declared( |actual-no-of-arguments) = 	one(
    		(?opName + ?SVar(opName))
    		;<debug-str>$[operation name : [<pp-aterm>opName] . Associated Signatures Found :  [<bagof-Get-Operation-Singature;pp-aterm> opName]]
    		;candidate-op-signatures := <bagof-Get-Operation-Singature> opName
    		;<assert-eq-opname-arity(|opName, actual-no-of-arguments)>candidate-op-signatures
      )
  	   
  is-declared =
    	one(?_{cookie} + ?SVar(_{cookie}))
	
	assert-eq-opname-arity(|actual-opname , actual-no-of-arguments)= 
			?[hd|tl]
			;(
			 			(expected-op-name , expected-no-of-arguments) := hd 
						;	actual-opname := expected-op-name 
						; actual-no-of-arguments := expected-no-of-arguments
				  <+
						<assert-eq-opname-arity(|actual-opname , actual-no-of-arguments)>tl
				)	  
       
rules // Constraints

  global-constraint-error:
    CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' not defined])
    where
      //require(is-declared)
			require(is-declared <+ is-declared(|<length> t*))
			
  global-constraint-error:
    Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
    where
    	require(is-declared <+ is-declared(|<length> t*))

  constraint-error:
    Var(x) -> (x, $[Variable '[x]' is not declared])
    where
      require(is-declared)
      
  global-constraint-error:
    Import(x) -> (x, $[Unable to import '[x]'])
    where
      require(not(<IsImportedFailed> x))

  global-constraint-error:
    DynRuleScopeId(x) -> (x, $[Dynamic rule '[x]' not defined])
    where
      require(is-declared)

  global-constraint-error:
    LabeledDynRuleId(x, _) -> (x, $[Dynamic rule '[x]' not defined])
    where
      require(is-declared)

  constraint-error:
    AnnoDef(a*, sdef @ SDefT(x, _, _, _)) -> (a*, $[No external strategy or rule '[x]'])
    with
      if not(!a* => []) then
        sig := <signature-of> sdef;
        rules(IsNoConflict: sdef)
      end
    where
      require(
        !a* => []
      + !a* => [Internal()]
      + <declaration-of> sdef => ExtSDef(_, _, _)
      )

  global-constraint-error:
    SDefT(x{cookie}, s*, t*, s) -> (x, $[Conflicts with external definition of '[x]'])
    where
      require(
        <Declaration> cookie => SDefT(_, _, _, _)
      <+
        IsNoConflict
      )

  // FIXME: name sdefs after constructors to fix constructor conflict errors 
  constraint-error:
    OpDecl(x{cookie}, s*) -> [(x, $[Conflicts with strategy '[y_name]']),
                              (y, $[Conflicts with constructor [x]/[<length> s*]])]
    where
      require(not(<Declaration> cookie => y @ SDefT(y_name, _, _, _)))

  constraint-error:
    Build(t) -> <constraint-error-bad-build> t

  constraint-error:
    Assign(_, t) -> <constraint-error-bad-build> t

  constraint-error:
    Rule(_, t, _) -> <constraint-error-bad-build> t
  
  constraint-error:
    BA(_, t) -> <constraint-error-bad-build> t
  
  constraint-error:
    App(_, t) -> <constraint-error-bad-build> t

  constraint-error:
    Match(t) -> <constraint-error-bad-match> t

  constraint-error:
    Assign(t, _) -> <constraint-error-bad-match> t

  constraint-error:
    AM(_, t) -> <constraint-error-bad-match> t

  constraint-error:
    Rule(t, _, _) -> <constraint-error-bad-match> t

  constraint-error-bad-build:
    t -> matches
    where
      collect(?RootApp(_) + ?App(_, _) + Wld + ?As(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));
      filter(not(?RootApp(_) + ?App(_, _)));
      map(!(<id>, "Match symbol in build pattern")) => matches;
      require([])

  constraint-error-bad-match:
    t -> builds
    where
      collect(?StringQuotation1(_, _) + ?StringQuotation2(_, _) + ?StringQuotation3(_, _) + ?StringQuotation4(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));
      filter(not(?RootApp(_) + ?App(_, _)));
      map(!(<id>, "Build symbol in match pattern")) => builds;
      require([])
  
  constraint-warning:
    Assign(v @ Var(x), _) -> (x, $[Variable '[x]' may be bound already])
    where
      Var(x') := <declaration-of> v;
      require(<origin-equal(|x)> x')

  constraint-warning:
    Var(x) -> (x, $[Unparenthesized constructor: use '[x]()' instead])
    where
      require(not(is-constructor))

  constraint-warning:
    CallT(SVar(<"debug" + "say">), [t], []) -> (s, $[Should be '![s]'])
    where
      !t => StrCong(s) + !t => IntCong(s)

  constraint-warning:
    Import("Java-15") -> (<id>, "Use 'import libjava-front' instead")

  /*
  constraint-warning:
    Module(x, _) -> (x, $[Module name should be qualified with a path relative to the import path])
    where
      not(NoAnalysis);
      {| SourceDir:
        rules(SourceDir :- _);
        <eq> (<base-filename> x, <remove-extension> <base-filename> <CurrentFileFullPath>);
        require(<resolve-import-path> $[[x].str] + <resolve-import-path> $[[x].rtree])
      |}
  */

  constraint-warning:
    Module(x, _) -> (x, $[Module name does not correspond to file name])
    where
      require(<eq> (<base-filename> x, <remove-extension> <base-filename> <CurrentFileFullPath>))

  constraint-warning:
    Import(f) -> (f, $[Relative path in import])
    where
      <string-starts-with(|"../")> f

  // TODO: overlapping signatures
