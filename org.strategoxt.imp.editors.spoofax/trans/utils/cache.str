module utils/cache
imports 
	common 
	lib/editor-common.generated 
	utils/path
	utils/debug
	context/signatures
	context/scope-tree
	config
	utils/contract
	
rules
  open-spx-compilation-unit(resolve-spx-path, resolve-cache-path, parse-file, precompile):
    path -> <id>
    where with-spxverify(
    	full-path := <resolve-spx-path>path;
    	cache-path := <resolve-cache-path> full-path;
    	path' := <get-normalized-path> full-path
    	//TODO : Take the following whole logic in indexing structure based on cached path and actual path.
    	//For example  - 
    	//if <verify-indexing-needed> (cache-path, path) then
    	//   ast := read it from file
    	//   index-compilation-init ( path , ast) 
    	//   <precompile> ast
    	//else
    	//   ast : = get-compilation-unit 
    	//end     
  	)
  	where with-spxverify(
		  if <is-newer> (cache-path, path) ; not(<get-currently-analyzing-ast-from-cache> full-path)then
      	// spx-compilation-unit := <ReadFromFile> cache-path;
      	dbg-compiler(! $[Cache | Already updated . Hence, doing nothing]) 
      	// since cache is updated , it implies that index is updated as well
      else
        
        //1. getting the cached AST to precompile it due to the recent changes.
        if not( spx-compilation-unit:=  <get-currently-analyzing-ast-from-cache>full-path) then
          dbg-compiler(! $[Cache | Reading it from actual source!]) ;
          spx-compilation-unit := <parse-file> full-path
        else
          dbg-compiler(! $[Cache | Reading it from cached source(i.e. the currently analzing ast)]) 
        end;
        //2. precomiling it so update the index and related artifacts 
        {| currently-precompiling-spx-abspath:
            rules ( 
              currently-precompiling-spx-abspath := path'  
            ); 
            dbg-compiler(! $[Precompiling [path']]);
            // precompiling modified source to update the cache 
            <precompile <+ throw-precompile-exception>spx-compilation-unit  
        |};
        //3. precomile is successful . Hence updating the existing cache. 
        //   cache acts as a marker to indicate whether compilation and 
        //   code generation is needed. 
        //   if it is in cache it means the precompilation is not needed.
        if <file-exists>full-path then
          // updating markers in cache if on filesystem (e.g., ignore libstratego-lib)
          <WriteToBinaryFile> (cache-path, cache-path);
          dbg-compiler(!$[Caching |Updating cache for following CompilationUnit: [<print-as-string>full-path]])
        end;
        <index-modified-compilation-units-path> path'
    	end
  	)		

    
rules 
	lib-exists-in-cache  = where(spx-lib-cache-path ; file-exists)
	 
	get-cached-lib-ast(read-lib) : 
		name -> ast
		where 
			<spx-lib-cache-path> name => cache-path;
			if <file-exists> cache-path then
		 	 	<ReadFromFile> cache-path => ast ;
		 		dbg-compiler(! $[Caching | Found ast [name].] |"get-cached-lib-ast","info")
			else
				<read-lib>name => ast ;
				<WriteToBinaryFile> (cache-path, ast) ;
				dbg-compiler(! $[Caching | Not Found in Cache. Caching & processing [name] legacy artifact.] |"get-cached-lib-ast","info") 
			end
		<+
			// Gracefully failing this strategy if it is not found in cache and in the library. 
			// It is considered as invalid import during error analysis.
			dbg-compiler(! $[Caching | Failed to get (& read) [name].] |"get-cached-lib-ast",<debug-level-WARNING>) ;
			fail
			     
signature constructors 
	CachedParseAstDef : Def
	ModifiedCompilationUnit: Def
	
rules
	// caching currently analyzing AST so that we don't have to read it again from the file and to use it later on. 
	store-currently-analyzing-ast = 
		where(
			(?(path, compilation-unit-ast) <+ throw-invalid-argument-exception(|"utils.cache.cache-currently-analyzing-ast")); 
			path' := <get-normalized-path>path;
			with-spxverify(
				<store-declared(|CachedParseAstDef())>(path' ,compilation-unit-ast)
			, !"Failed to store store-currently-analyzing-ast "
			)
	  )
	
	get-currently-analyzing-ast-from-cache  = get-normalized-path ; get-declared(|CachedParseAstDef()) 
	
	get-all-modified-compilation-units = 	get-all-declared-by-type(|ModifiedCompilationUnit())
	
	index-modified-compilation-units-path = verify(String | <id> , "String"); store-declared(|ModifiedCompilationUnit()) 
	