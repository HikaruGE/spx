module analyze/main

imports 
	context/sdf/declare
	context/-
	codegen/compile
	normalize/signatures
imports 
	include/SpoofaxLang
	include/libtemplatelang
imports
	common
	utils/annotations
	utils/debug	
	codegen/main
imports 
	analyze/sdf/check 
	analyze/esv/check
	analyze/str/check 
	analyze/check-module
	analyze/check-package
	analyze/check-project
imports	
	lib/editor-common.generated
imports 
	utils/cache
	utils/debug
	utils/contract
	spoofaxlang
	common
	
rules 
	// performs static analysis and semantic checking 
	analyze-main= 
		with-spxverify(
			?list-of-package-qnames
			; <analyze-global>()
			; <list-loop(analyze-spx-package)>list-of-package-qnames
			, !"analyze-main failed"
		)
	
rules	// Package specific semantic error checking 

	// verify whether this package will be analyzed or not
	should-analyze-this-package = not(is-in-analyzed-packages-queue) 
		
	
	// Fails if there is any semantic problems 
	fail-if-has-errors : 
		problems@(errors, warning, infos*) -> problems
		where 
			if not(!errors => []) then 
		 		fail	
		 	end		 	 	

	// Analyzes SPX packages. 
	analyze-spx-package: 
		package-typed-qname@Package(untyped-qname) -> <id>
		where 
			 dbg-analysis(! $[Analyze| Analyze-spx-package| Planning to Analyze : [<print-as-string>]]| "analyze-spx-package" , <debug-level-INFO>)
		where
			if should-analyze-this-package  then //FOR handling circular referneces   
				{| GetEnclosingPackageName 
				 : rules ( 
		 			 	GetEnclosingPackageName:= package-typed-qname
		 			 )
	 			 ; <analyze>package-typed-qname // analyzing current package's declaration
				 ; with-spxverify ( // analyzing all the enclosed module definition
		   				<list-loop(analyze-spx-module)><get-enclosed-modules>package-typed-qname
					 )		
				 |}		
        ; with-spxverify( <add-to-analyzed-packages-queue>package-typed-qname )
		  <+
		    dbg-analysis(! $[Analyze| analyze-spx-package > [<print-as-string>package-typed-qname] Failed. ] | "analyze-spx-package" , <debug-level-ERROR>);
		    fail
      end
			
	analyze-spx-module: 
		module-typed-qname@Module(_) -> <id>
		where 
			dbg-analysis(! $[Analyze|  analyze-spx-module> Planning to analyze module for semantic problems: [<print-as-string>]] | "analyze-spx-module" , <debug-level-INFO>)    
		where 
			
			if not(<is-a-analyzed-module>module-typed-qname) then
				<get-module-definition-with-location> module-typed-qname => (module-decl,location);
				{| GetEnclosingModuleName
			   : rules( GetEnclosingModuleName := module-typed-qname)
				 ; <analyze-module-definition>module-decl
			   |}
				 ; with-spxverify(<add-to-analyzed-modules>(module-typed-qname,location))	   
				<+ 
				dbg-analysis(!$[Analyze| analyze-spx-module| [<print-as-string>module-typed-qname] Failed. ] | "analyze-spx-module" , <debug-level-ERROR>)
				; fail
			end	
			 
rules
	//lookups for the analyzed problems
	get-all-analyzed-problems =  all-keys-GetSemanticProblems ; map(GetSemanticProblems); unzip-semantic-issuses 
	
	get-semantic-problmes-by-file: 
		file-abs-path ->problems
		where
			verify(String | <id> , "String @get-semantic-problmes-by-file")  
			; get-declared-modules-qname
			; get-semantic-problems(
					get-semantic-problmes-at-module-level
			  ) 
		  => problems-at-modules*
		where	
			<get-declared-packages-qname>file-abs-path
			; get-semantic-problems(
					get-semantic-problmes-at-package-level
				) 
			=> problems-at-packages* 
		where	
			problems := <merge-semantic-problems>(problems-at-modules* , problems-at-packages*) 
	
		
	get-semantic-problems(s): 
		scopes* -> problems
		where
			<map(s)>scopes* => problmes-zipped* ;  
			<unzip-semantic-issuses>problmes-zipped* => problems
	
	get-semantic-problmes-at-package-level : 
		p@Package(QName(_)) -> problems-package-level
		where
			<GetSemanticProblems>p => problems-package-level 
			<+
			problems-package-level := ([] , [] , [])
	
	get-semantic-problmes-at-module-level : 
		module-typed-qname@Module(_) -> problems-module-level
		where
			<get-enclosing-package-qname> module-typed-qname => package-typed-qname;
			<get-analyzed-problems-of> (package-typed-qname,module-typed-qname)=>problems-module-level
		<+
			problems-module-level := ([] , [] , [])
		
	get-analyzed-problems-of: 
		scope@(package-typed-qname, module-typed-qname) -> problems
		where 
			contracts (
					contract-requires(?Package(QName(_)) |package-typed-qname);
					contract-requires(?Module(QName(_))  |module-typed-qname)
			)	
			; <GetSemanticProblems>scope => problems
				
rules 
			
	merge-semantic-problems : 
		(unziped-issues1 , unzipped-issues2)-> semantic-problems*
		where 
			with-spxverify( 
				!unziped-issues1  =>(merrors,mwarnings,minfos);
				!unzipped-issues2 =>(err, warning, info);
				combined-problmes* := [(merrors,mwarnings,minfos),(err, warning, info)]
			)	
		where		
			<unzip-semantic-issuses>combined-problmes* => semantic-problems* 

	// Following strategy unzips semantic issues and combines them 
	// together. Example : Converts a list as following 
	//				[([a1] , [b1] , [c1])
	//				([a2] , [b2] , [c2])
	//				([a3] , [b3] , [c3])
	//				] 
	//	to:
	//			([a1,a2,a3] , [b1,b2,b3] , [c1,c2,c3])
	unzip-semantic-issuses:
		list-of-semantic-issues -> unziped-list
		where
				<unzip-semantic-issuse(|[] , [], [])>list-of-semantic-issues => unziped-list
			<+
				debug(!"unzip semantic issues failed : ");fail
	
	// unziping list of semantic issues
	unzip-semantic-issuse(|errors, warnings, infos) =
		?[hd-issue|rest-issues];
		(
				(!hd-issue => (errs', warns' , infos') <+ <debug> $["Illegal Argument in unzip-semantic-issues : [<print-as-string>hd-issue]"];fail)
				;err1 := <concat>[errs', errors]
				;war1 := <concat>[warns', warnings]
				;inf1 := <concat>[infos', infos]
				;<unzip-semantic-issuse(|err1, war1, inf1)>rest-issues 
			 <+
			  !hd-issue => [];
			  <unzip-semantic-issuse(|errors, warnings, infos)>rest-issues
		)
		
	unzip-semantic-issuse(|errors, warning, infos) : [] -> (errors, warning, infos)		
