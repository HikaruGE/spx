module analyze/main

imports 
	context/sdf/declare
	context/-
	normalize/signatures
imports 
	include/SpoofaxLang
imports
	common
	utils/annotations
	utils/debug	
imports 
	analyze/sdf/check 
	analyze/esv/check
	analyze/str/check 
	analyze/check-module
	analyze/check-package
	lib/editor-common.generated
imports 
	utils/contract 	
	spoofaxlang
	
rules			 
	// Analyze Semantic Errors
	should-analyze-this-package = 
		?package-qname;
		where(not(<AnalyzedPackage>package-qname))
	
	// Fails if there is any semantic problems 
	fail-if-has-errors : problems@(errors, warning, infos*) -> problems
		where 
			if not(!errors => []) then 
		 		fail	
		 	end		 	 	

	// Analyzes SPX packages. 
	analyze-spx-package: 
		package-typed-qname@Package(untyped-qname) -> <id>
		where 
			<debug-analysis> $[Analyze| Analyze-spx-package| Planning to Analyze : [<pp-aterm>]] 
		where
				if should-analyze-this-package  then //FOR handling circular referneces   
					{|
						GetEnclosingPackageName:
							rules ( GetEnclosingPackageName      := package-typed-qname);
							<list-loop(
									analyze-spx-module
								)
							><get-enclosed-modules>package-typed-qname
					|};		
				where(
					rules(AnalyzedPackage: package-typed-qname -> package-typed-qname)
				)
				<+
				<debug-analysis> $[Analyze| analyze-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
				;fail
			end



	analyze-spx-module: 
		module-typed-qname@Module(untyped-qname) -> <id>
		where 
			<debug-analysis> $[Analyze|  analyze-spx-module> Planning to analyze module for semantic problems: [<pp-aterm>]] 
		where 
			if not(<AnalyzedModule>module-typed-qname) then
				<debug-analysis> $[Analyze| analyze-spx-module> Currently Analyzing : [<pp-aterm>]]; 
				module-decl* := <get-module-declarations>module-typed-qname;
				{|GetEnclosingModuleName:
						rules( GetEnclosingModuleName := module-typed-qname);
						<list-loop(
								analyze
						 )>module-decl*
				|};
				module-abs-path := <DeclaredModule>untyped-qname;
				where(rules(
					AnalyzedModule:     module-typed-qname -> module-typed-qname 
					AnalyzedModulesDeclaredIn:+ module-abs-path -> module-typed-qname
					)
				)
				<+
				<debug-analysis> $[Analyze| analyze-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
				;fail
			else
				<debug-analysis> $[Analyze| analyze-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
			end		
	
rules
	
	//lookups for the analyzed problems
	get-all-analyzed-problems =  all-keys-GetSemanticProblems ; map(GetSemanticProblems); unzip-semantic-issuses 
	
	get-analyzed-problems-of: scope@(package-typed-qname, module-typed-qname) -> problems
		where 
			contracts (
					contract-requires(?Package(QName(_)) |package-typed-qname);
					contract-requires(?Module(QName(_))  |module-typed-qname)
			)	
		where
			<GetSemanticProblems>scope => problems 
		where
			<debug-compiler> $[ErrorChecking |  Problmes found [<pp-aterm-forced>scope] :  [<pp-aterm-forced>problems]]	
rules 
	//analyzes module errors returns it as a touple of errors , warnings and infos 
	analyze-module-semantics : m@Module(attrb* , modname , section*)  -> (merrors',[],[]) 
	where 
		<collect-all(module-constraint-error, conc)>m  => merrors'

		
	// analyzes module errors and appened it with the existing problems  
	append-semantic-problems(s|unziped-issues*):  m@Module(attrb* , modname , section*)  -> semantic-problems*
	with 
		(merrors,mwarnings,minfos) 	:=  <s> m;
		!unziped-issues*  =>(err, warning, info);
		combined-problmes* := [(merrors,mwarnings,minfos),(err, warning, info)]
	where		
		<unzip-semantic-issuses>combined-problmes*=> semantic-problems* 

      
rules


	/* Converts a list as following 
	[([a1] , [b1] , [c1])
	([a2] , [b2] , [c2])
	([a3] , [b3] , [c3])
	] 
	To:
	([a1,a2,a3] , [b1,b2,b3] , [c1,c2,c3])
	*/
	unzip-semantic-issuses:
		list-of-semantic-issues -> unziped-list
		where
			<unzip-semantic-issuse(|[] , [], [])>list-of-semantic-issues => unziped-list
			<+
			debug(!"unzip semantic issues failed : ");fail
	
	//unziping list of semantic issues
	unzip-semantic-issuse(|errors, warnings, infos) =
		?[hd-issue|rest-issues];
		(
				(!hd-issue => (errs', warns' , infos') <+ <debug> $["Illegal Argument in unzip-semantic-issues : [<pp-aterm>hd-issue]"];fail)
				;err1 := <concat>[errs', errors]
				;war1 := <concat>[warns', warnings]
				;inf1 := <concat>[infos', infos]
				;<unzip-semantic-issuse(|err1, war1, inf1)>rest-issues
			 <+
			  !hd-issue => [];
			  <unzip-semantic-issuse(|errors, warnings, infos)>rest-issues
		)
		
	unzip-semantic-issuse(|errors, warning, infos) : [] -> (errors, warning, infos)		
 		
 		
 	
/*
	Idea is following . Build a scope tree as follows .
	
	Globals   = all the symbols from the legacy import will stored in this namespace
	  |
	Packages  = package consist of modules 
		|
	Modules		= modules consist of Sections i.e. STR Sections , SDF Sections and ESV Sections
	
*/	



/*
Todo: 
	without import => make the package analysis and code generation works
*/


/*
TODO : 
-----------------------------------------------------------------------
Visibility to package level : 
Follow the nested scoping as mentioned in Language Implementation Patterns 

	* Add visibility modifier such as   > Public : Visibility , Private : Visibility  , Internal : 
	
		Internal > internal to assembly
		Private  > private to a concept  todo >>> will be useful to handle hiddens. Take care of hiddens in the symbol table that we are about to build. 
		Public   > public  , everything is by default public. 
		
	* While creating a nested scope , anotate the tree with the extra attributes . 
	* Import-chain > 1 => Internal Visibility 
	
Accessing Internal members will results in "Are you missing any reference to ..."

*/	 		
 		     