module analyze/esv/check

imports
	common
	context/sdf/declare

imports 
	utils/debug
	context/-
imports
  include/SpoofaxLang
 
// TODO: warn about multi-char highlighted brackets
// TODO: check if provider/imported/etc. files exist
// TODO: check if there is _any_ provider for observer etc.
 
rules
  
  analyze-section: 
		ESVSection(ast) -> (error-esv*, warning-esv* , [])
  	where
  		<debug-analysis>$[ErrorChecking | ESV Section : [<pp-aterm>]]
		where
  		error-esv*   := <flatten-list><collect-all(constraint-esv-error, conc)> ast;
  		warning-esv* := <collect-all(constraint-esv-warning, conc)> ast

rules 
	resolve-sdf-sort-declaration = 
 		?symbol; 
 		<resolve-symbol-unique-declaration(all-keys-SortDeclaration , bagof-SortDeclaration)><to-scoped-symbol>symbol 
 	<+
 		<debug-analysis> $[ErrorChecking|Failed to retrive SDF Sort for symbol [<pp-aterm>]];
 		fail

rules

	constraint-esv-error:
    Sort(x) -> (x, $[Unknown sort [x]])
    where
      not(<resolve-sdf-sort-declaration> x)
  
  constraint-esv-error:
    SemanticProvider(x) -> (x, $[Must be a generated .ctree or .jar file])
    where
      not(<string-ends-with(|".jar") + string-ends-with(|".ctree")> x)
   		
  constraint-esv-error: 
   	LanguageName( name ) -> (name, $[ Multiple declarations of language name. Declared in following packages : [<pp-aterm>packages*]])
   	where
   			<get-languagename-declaration-sites> name =>packages*;
   			is-not-empty-list;
   			make-set;
				not(ensure-is-unique)
	
	constraint-esv-error: 
		StartSymbols(sorts*) -> err-messages*
		where
			s* := <get-start-symbols> <GetEnclosingPackageName>; // getting all the context-free-start-symbols for the package   	
			<filter(unknown-start-symbol-error(|s*))>sorts* => err-messages*;
			if !err-messages* => [] then 
				fail
			end
	
	unknown-start-symbol-error(|start-symbols-found-in-sdf-def) : 
		s@Sort(x) -> (s, $[Undefined Start Symbol :  "[x]".])
		where 
			<not(fetch-elem(?sort(x)))>start-symbols-found-in-sdf-def
			
					
rules
	   		
  constraint-esv-warning: 
   	LanguageName( name ) -> (name, $[Same Language name is declared multiple times in this package.])
   	where
   			<get-languagename-declaration-sites> name =>packages*;
   			is-not-empty-list;
   			make-set;
				ensure-is-unique
		where		
				not(!packages* => [_])
   	 		 