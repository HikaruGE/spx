module normalize/main 

imports
  libstratego-lib
  libstrc
imports 
	normalize/stratego
	normalize/signatures
imports 
	include/SpoofaxLang
imports 
	utils/annotations
	utils/debug
	utils/cache
imports 
	common
	config
	
imports 
	context/scope-tree
	context/signature	
 
//FIX : 
// Design issues : 
//		Package Common Imports are only for the current spx file at this moment
//		It could be kept as it is or make it common in the whole package. 
 

strategies		
	nomalize-all = desugar-compilationa-unit

rules	
	
	desugar-compilationa-unit: 
		CompilationUnit(moduledef*) -> 	<desugar-compilationa-unit>CompilationUnit([] , [appneded-default-package-declaration])
		where 
			 appneded-default-package-declaration :=  Package(Name(<default_package_name>) , moduledef*)
	
	
	
	desugar-compilationa-unit: 
		CompilationUnit(import* , package*) -> 	CompilationUnit( import* , modified-packages) 
		with 
			{| PackageCommonImports:
						<alltd(desugar-imports)> import*;
						<alltd(desugar-spx-package)> package* => modified-packages
			|}
	
	desugar-imports:
		i@Imports(import*) -> i
		with	
			rules(
				PackageCommonImports:+ _ -> i
			)
	
	
	
	desugar-spx-package:
		Package(Name(package-name) , modules* ) -> normalized-package-definition
		with 
			<debug-compiler>$[Desugaring Packages [<pp-aterm>package-name]]
		where 
			!QName([package-name]) 																=> package-qname;
			<desugar-spx-package>Package(package-qname, modules*) => normalized-package-definition 
		
	desugar-spx-package:	
		p@Package(package-qname , modules* ) -> modifiedPackageDescription
		with 
			!package-qname => QName(_);
				<debug-compiler>$[Desugaring Packages [<pp-aterm>package-qname]]
		with
			{| EnclosingNamespace :
			   	rules(
						EnclosingNamespace := Package(package-qname)
			   	);
			   	<alltd(desugar-spx)> modules*  => desugared-modules*
			|}
		with 
			currently-precompiling-spx-abspath  					=> package-abs-path;
			!Package( package-qname , desugared-modules*) => modifiedPackageDescription
		where
			<store-package-abspath>(package-qname ,package-abs-path)
		
		/* seems not needed at this moment. hence, commenting this code.
		where
			if <get-package-declaration> package-qname => Package(package-qname, module-def*) then
				modifiedPackageDescription' 						 := Package(package-qname, <conc>(module-def* , desugared-modules*))
			else
				modifiedPackageDescription' 						 := modifiedPackageDescription 
			end;
			<store-declaration(|Packages())>	(package-qname,  modifiedPackageDescription')
		*/	
	
	desugar-spx: 
		m@Module(attrb* , modname , section*) -> modifiedModuleDescription
		with 
			<debug-compiler>$[Desugaring Modules : [<pp-aterm>modname]]
			
		where
			EnclosingNamespace      								=>  package;
			modname-with-annotation 					      :=  <add-annotation(|package)>modname;
		  !modname-with-annotation				      	=>  SPXModuleName(mod-name-string);
		  !package							  								=>  Package(QName( package-name-part*));
		  enclosing-module-name   								:=  [package-name-part*| [mod-name-string]];
		  enclosing-module-qname   								:=  QName(enclosing-module-name) 
		where 
			{| EnclosingNamespace:
			  	rules(
						EnclosingNamespace 								:= 	Module(enclosing-module-qname)  
					);
					sections' := <conc>(<reverse><bagof-PackageCommonImports>, <alltd(desugar-spx)>section*)
					;<debug-symboltable> $[ Storing enclosing namespace : [<pp-aterm>enclosing-module-qname]]
			|}
		with 
			currently-precompiling-spx-abspath  												=> package-abs-path;
			!Module(attrb* , modname-with-annotation , sections')				=> modifiedModuleDescription
		where	
			<store-module-abspath> (enclosing-module-qname, package-abs-path);
			<store-declaration(|Modules())>(enclosing-module-qname,  modifiedModuleDescription);
			<store-scope-reference>(Module(enclosing-module-qname),  package);
			<store-original-declaration(|Modules())>(enclosing-module-qname,  m) // stored original ast 
		
		 
		
	//Desugaring SDF Sections 
	desugar-spx : SDFSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> <id>
	
	//Desugarting STR sections 
	desugar-spx : STRSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> STRSection ( sectionDef' )
		with 
			<basic-stratego-desugar-top> sectionDef => sectionDef'  		
	
	//Desugaring ESV Sections 
	desugar-spx : ESVSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> <id>
	
	


			